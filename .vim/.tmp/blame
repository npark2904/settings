f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900    1) /*
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900    2)     Author
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900    3)     <table>
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900    4)     date      author                    description
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900    5)     --------  --------------            ----------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900    6)     20101103  il.won@lge.com            Created
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900    7)     </table>
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900    8) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900    9)     Description
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   10) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   11) */
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   12) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   13) // Platform interface
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   14) #include "ServiceMemory.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   15) #include "ServiceTrace.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   16) #include "ServiceMSG.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   17) #include "ServiceSystemTime.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   18) #include "ServiceUtil.h"
b6e14a99 (jeonghoon.yi  2017-09-04 08:48:57 +0900   19) #include "ServicePhoneInfo.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   20) #include "TextParser.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   21) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   22) // Engine IM interface/class
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   23) #include "IIMService.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   24) #include "IConferenceManager.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   25) #include "IMessageBodyPart.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   26) #include "IMMessage.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   27) #include "IMUtil.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   28) #include "IChat.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   29) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   30) // Engine interface
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   31) #include "IMessage.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   32) #include "ISIPMessage.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   33) #include "ISIPHeader.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   34) #include "IMediaDescriptor.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   35) #include "SIPStatusCode.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   36) #include "SIPHeaderName.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   37) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   38) // Enabler interface
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   39) #include "IURCSService.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   40) #include "IURCSIM.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   41) #include "IURCSIMConstant.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   42) #include "IMInternalMsgDef.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   43) #include "IURCSInterfaceDef.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   44) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   45) //Enabler class
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   46) #include "RCS3gpp.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   47) #include "RCSContactFeatureManager.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   48) #include "RCSSIMOperator.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   49) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   50) // IM Enabler class
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   51) #include "ComposingState.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   52) #include "RCSIMIdentity.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   53) #include "IMConstants.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   54) #include "IMSessionCapabilityInfo.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   55) #include "IMCpimMessage.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   56) #include "IMCpimMessageData.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   57) #include "IMMessageRepository.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   58) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   59) #include "IIMReasonInfo.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   60) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   61) #include "RCSIMConfig.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   62) #include "IMInvitationChecker.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   63) #include "IMInvitationParser.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   64) #include "PagerIMDNHelper.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   65) 
6c529b85 (kyujong.lee   2017-11-17 11:52:28 +0900   66) #include "RcsSipErrorHandler.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   67) #include "TMUSLineHelper.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   68) #include "TMUSMetricHelper.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   69) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   70) #include "SIPParameter.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   71) #include "IMSStrLib.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   72) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   73) #include "IIMServiceState.h"
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900   74) #include "JanskyStatusChecker.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   75) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   76) //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   77) #include "IIMMsrpCiqMethod.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   78) #include "IIMMsrpCiq.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   79) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   80) #include "ChatSession.h"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   81) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   82) const IMS_CHAR STR_DEFERRED_NOTI_URI_NAME[] = {"rcse-standfw"};
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   83) #define MAX_LEN_MSGBODY_SIZE                1300 //if the message to receive is larger than this size, request MUA to save a recevied file msg
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   84) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   85) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   86) __IMS_TRACE_TAG_USER_DECL__("COM_IM");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   87) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   88) BEGIN_STATE_MAP(ChatSession)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   89)     STATE_ENTRY(STATE_INITIATED)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   90)     STATE_ENTRY(STATE_PENDING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   91)     STATE_ENTRY(STATE_INVITING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   92)     STATE_ENTRY(STATE_NEGOTIATING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   93)     STATE_ENTRY(STATE_ESTABLISHING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   94)     STATE_ENTRY(STATE_ESTABLISHED)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   95)     STATE_ENTRY(STATE_TERMINATING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   96)     STATE_ENTRY(STATE_TERMINATED)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   97) END_STATE_MAP()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   98) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900   99) BEGIN_STATE_MSG_MAP(ChatSession, STATE_INITIATED)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  100)     STATE_MSG_ENTRY(IURCSChat::STARTCHAT_EX_CMD, &ChatSession::StateINITIATED_Start)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  101) END_STATE_MSG_MAP()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  102) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  103) BEGIN_STATE_MSG_MAP(ChatSession, STATE_PENDING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  104)     STATE_MSG_ENTRY(INTERNAL_RCS_SERVICE_CONNECTED, &ChatSession::StatePENDING_ServiceStart)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  105)     STATE_MSG_ENTRY(IURCSChat::TERMINATE_CMD, &ChatSession::StatePENDING_Close)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  106) END_STATE_MSG_MAP()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  107) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  108) BEGIN_STATE_MSG_MAP(ChatSession, STATE_INVITING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  109)     STATE_MSG_ENTRY(IURCSChat::TERMINATE_CMD, &ChatSession::StateINVITING_Close)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  110)     STATE_MSG_ENTRY(SESSION_PROVISIONALRES_RECEIVED, &ChatSession::StateINVITING_SessionProvisionalResReceived)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  111)     STATE_MSG_ENTRY(SESSION_STARTFAILED, &ChatSession::StateINVITING_SessionStartFailed)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  112)     STATE_MSG_ENTRY(TIMER_EXPIRED, &ChatSession::StateINVITING_TimerExpired)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  113) END_STATE_MSG_MAP()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  114) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  115) BEGIN_STATE_MSG_MAP(ChatSession, STATE_NEGOTIATING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  116)     STATE_MSG_ENTRY(INVITATION_RECEIVED, &ChatSession::StateNEGOTIATING_InvitationReceived)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  117)     STATE_MSG_ENTRY(IURCSChat::ACCEPT_CMD, &ChatSession::StateNEGOTIATING_Accept)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  118)     STATE_MSG_ENTRY(IURCSChat::REJECT_CMD, &ChatSession::StateNEGOTIATING_Reject)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  119)     STATE_MSG_ENTRY(IURCSChat::TERMINATE_CMD, &ChatSession::StateNEGOTIATING_Close)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  120)     STATE_MSG_ENTRY(SESSION_PROVISIONALRES_RECEIVED, &ChatSession::StateNEGOTIATING_SessionProvisionalResReceived)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  121)     STATE_MSG_ENTRY(SESSION_ALERTING, &ChatSession::StateNEGOTIATING_SessionAlerting)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  122)     STATE_MSG_ENTRY(SESSION_CLOSED, &ChatSession::StateNEGOTIATING_SessionClosed)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  123)     STATE_MSG_ENTRY(SESSION_STARTED, &ChatSession::StateNEGOTIATING_SessionStarted)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  124)     STATE_MSG_ENTRY(SESSION_STARTFAILED, &ChatSession::StateNEGOTIATING_SessionStartFailed)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  125)     STATE_MSG_ENTRY(TIMER_EXPIRED, &ChatSession::StateNEGOTIATING_TimerExpired)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  126) END_STATE_MSG_MAP()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  127) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  128) BEGIN_STATE_MSG_MAP(ChatSession, STATE_ESTABLISHING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  129)     STATE_MSG_ENTRY(IURCSChat::TERMINATE_CMD, &ChatSession::StateESTABLISHING_Close)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  130)     STATE_MSG_ENTRY(SESSION_STARTED, &ChatSession::StateESTABLISHING_SessionStarted)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  131)     STATE_MSG_ENTRY(SESSION_STARTFAILED, &ChatSession::StateESTABLISHING_SessionStartFailed)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  132)     STATE_MSG_ENTRY(TIMER_EXPIRED, &ChatSession::StateESTABLISHING_TimerExpired)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  133) END_STATE_MSG_MAP()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  134) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  135) BEGIN_STATE_MSG_MAP(ChatSession, STATE_ESTABLISHED)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  136)     STATE_MSG_ENTRY(IURCSChat::SENDMESSAGE_CMD, &ChatSession::StateESTABLISHED_SendMessage)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  137)     STATE_MSG_ENTRY(IURCSChat::SENDISCOMPOSING_CMD, &ChatSession::StateESTABLISHED_SendComposingStatus)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  138)     STATE_MSG_ENTRY(IURCSChat::SENDIMDN_CMD, &ChatSession::StateESTABLISHED_SendIMDN)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  139)     STATE_MSG_ENTRY(IURCSChat::TERMINATE_CMD, &ChatSession::StateESTABLISHED_Close)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  140)     STATE_MSG_ENTRY(MEDIA_ABORTED, &ChatSession::StateESTABLISHED_SessionAborted)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  141)     STATE_MSG_ENTRY(SESSION_CLOSED, &ChatSession::StateESTABLISHED_SessionClosed)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  142)     STATE_MSG_ENTRY(TIMER_EXPIRED, &ChatSession::StateESTABLISHED_TimerExpired)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  143)     STATE_MSG_ENTRY(INACTIVITY_NOTIFIED, &ChatSession::StateESTABLISHED_InactivityNotified)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  144) END_STATE_MSG_MAP()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  145) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  146) BEGIN_STATE_MSG_MAP(ChatSession, STATE_TERMINATING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  147)     STATE_MSG_ENTRY(SESSION_STARTFAILED, &ChatSession::StateTERMINATING_SessionClosed)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  148)     STATE_MSG_ENTRY(SESSION_CLOSED, &ChatSession::StateTERMINATING_SessionClosed)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  149)     STATE_MSG_ENTRY(TIMER_EXPIRED, &ChatSession::StateTERMINATING_TimerExpired)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  150) END_STATE_MSG_MAP()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  151) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  152) BEGIN_STATE_MSG_MAP(ChatSession, STATE_TERMINATED)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  153) END_STATE_MSG_MAP()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  154) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  155) ;;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  156) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  157) PUBLIC
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  158) ChatSession::ChatSession(IN IIMService *piIMService, IN IMS_UINT32 nNetworkType, IN IMS_UINT32 nSIMSlot /*= 0*/)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  159)     : BaseSession(piIMService, CHAT, nNetworkType, nSIMSlot)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  160)     , IMSStateMachine(STATE_INITIATED)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  161)     , piChat(IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  162)     , nChatType(LIVE_CHAT)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  163)     , pSubject(IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  164)     , nRetryCount(5)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  165)     , piSessionCapa(new IMSessionCapabilityInfo(CHAT))
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900  166)     , piIMCpimMessage(new IMCpimMessage(nSIMSlot))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  167)     , b200OKReceived(IMS_FALSE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  168) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  169)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  170) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  171)     IMS_TRACE_I("+ChatSession", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  172)     IMS_TRACE_MEM("RCS_MEM","IM_M : ChatSession = %" PFLS_u, sizeof(ChatSession), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  173) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  174)     bIsMobileOriginated = IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  175) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  176) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  177) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  178) PUBLIC
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  179) ChatSession::ChatSession(IN IIMService *piIMService, IN IChat* _piChat, IN IMS_UINT32 nNetworkType, IN IMS_UINT32 nSIMSlot /*= 0*/)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  180)     : BaseSession(piIMService, CHAT, nNetworkType, nSIMSlot)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  181)     , IMSStateMachine(STATE_NEGOTIATING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  182)     , piChat(_piChat)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  183)     , nChatType(0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  184)     , pSubject(IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  185)     , nRetryCount(5)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  186)     , piSessionCapa(new IMSessionCapabilityInfo(CHAT))
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900  187)     , piIMCpimMessage(new IMCpimMessage(nSIMSlot))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  188)     , b200OKReceived(IMS_FALSE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  189) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  190)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  191) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  192)     IMS_TRACE_I("+ChatSession", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  193)     IMS_TRACE_MEM("RCS_MEM","IM_M : ChatSession = %" PFLS_u, sizeof(ChatSession), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  194) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  195)     if (piChat != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  196)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  197)         piChat->SetListener(this);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  198) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  199)         //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  200)         if (pRCSIMConfig->IsSupportCiq())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  201)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  202)             piIMMsrpCiq = piChat->GetIMMsrpCiq();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  203)             if (piIMMsrpCiq != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  204)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  205)                 piIMMsrpCiq->SetListener(this);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  206)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  207)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  208)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  209) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  210)     bIsMobileOriginated = IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  211) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  212) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  213) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  214) PUBLIC VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  215) ChatSession::~ChatSession()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  216) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  217)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  218) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  219)     IMS_TRACE_I("~ChatSession : Session-ID[%" PFLS_u "]", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  220)     IMS_TRACE_MEM("RCS_MEM","IM_F : ChatSession = %" PFLS_u, sizeof(ChatSession), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  221) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  222)     if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  223)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  224)         delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  225)         pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  226)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  227) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  228)     //notify message sending status
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  229)     ClearIMMessageRepository();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  230) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  231)     DestroyChat();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  232) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  233)     if (piSessionCapa != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  234)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  235)         delete piSessionCapa;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  236)         piSessionCapa = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  237)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  238) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  239)     if (piIMCpimMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  240)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  241)         delete piIMCpimMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  242)         piIMCpimMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  243)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  244) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  245) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  246) PUBLIC VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  247) void ChatSession::Abort(IN IMS_SINT32 nReason, IN CONST IMS_BOOL bNeedAnswer /* = IMS_TRUE */)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  248) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  249)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  250) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  251)     IMS_TRACE_I("Abort : Session-ID[%" PFLS_u "], State[%d], Reason[%d]", GetSessionId(), GetState(), nReason);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  252) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  253)     for (IMS_UINT32 i = 0; i < TIMER_MAX; i++)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  254)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  255)         StopTimer(&anTimerId[i]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  256)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  257) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  258)     IMS_UINT32 nCurrentState = GetState();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  259)     IMS_UINT32 nOldState = GetOldState();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  260) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  261)     IMS_RESULT bResult = IMS_SUCCESS;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  262) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  263)     if (piChat != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  264)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  265)        switch(nCurrentState)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  266)        {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  267)            case STATE_NEGOTIATING:
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  268)            {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  269)                if (bIsMobileOriginated == IMS_FALSE) //MT
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  270)                {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  271)                    bResult = piChat->Reject(480);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  272)                }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  273)                else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  274)                {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  275)                    bResult = piChat->Close();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  276)                }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  277)                break;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  278)            }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  279)            case STATE_ESTABLISHED:
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  280)            {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  281)                 //TMUS_add Reason header in BYE request && ATT
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  282)                 if (pRCSIMConfig->GetCountry() == RCSIMConfig::COUNTRY_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  283)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  284)                     SetTerminateReasonHeader(IURCSIMTerminateReason::UNGRACEFUL_TERMINATION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  285)                 }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  286)                 //TMUS_add Reason header in BYE request && ATT
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  287)            }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  288)            case STATE_INVITING:
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  289)            case STATE_ESTABLISHING: //MT
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  290)            {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  291)                bResult = piChat->Close();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  292)                break;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  293)            }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  294)            case STATE_TERMINATING:
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  295)            {    //already notified the result to app, nothing to do
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  296)                 return;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  297)            }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  298)            default:
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  299)                break;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  300)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  301)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  302) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  303)     if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  304)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  305)         if (bNeedAnswer)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  306)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  307)             NotifyMessageSentInd(pSubject->GetMessageId(), IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  308)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  309) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  310)         delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  311)         pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  312)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  313) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  314)     //notify message sending status
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  315)     ClearIMMessageRepository(bNeedAnswer);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  316) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  317)     if (nCurrentState != STATE_TERMINATED)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  318)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  319)         // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  320)         if (bNeedAnswer)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  321)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  322)             if (nCurrentState == STATE_ESTABLISHED ||
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  323)                 (nCurrentState == STATE_TERMINATING && nOldState == STATE_ESTABLISHED))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  324)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  325)                 NotifyTerminatedInd(nReason);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  326)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  327)             else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  328)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  329)                 NotifyEstablishedInd(IMS_NULL, nReason);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  330)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  331)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  332) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  333)         if (bResult != IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  334)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  335)             SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  336)             DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  337)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  338)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  339)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  340)             SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  341)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  342)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  343) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  344) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  345) PUBLIC VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  346) IMS_BOOL ChatSession::HandleMessage(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  347) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  348)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  349) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  350)     IMS_TRACE_D("HandleMessage : STATE[%d] MSG[%d]", GetState(), objMSG.nMSG, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  351) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  352)     IMS_BOOL bRetVal = OnStateMessage(objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  353) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  354)     if (bRetVal == IMS_FALSE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  355)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  356)         IMS_TRACE_E(0, "HandleMessage : Not Handled!", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  357)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  358) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  359)     return bRetVal;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  360) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  361) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  362) PUBLIC
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  363) IMS_UINT32 ChatSession::GetState()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  364) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  365)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  366) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  367)     return IMSStateMachine::GetState();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  368) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  369) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  370) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  371) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  372) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  373) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  374) void ChatSession::ComposingIndicatorReceived(IN IIMSession *piSession, IN CONST AString &strSender, IN IMS_SINT32 nTimeout)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  375) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  376)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  377) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  378)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : ComposingIndicatorReceived", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  379) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  380)     (void)piSession;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  381)     (void)strSender;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  382) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  383)     //IURCSChatReceivedIsComposingIndParam *pOutParam = new IURCSChatReceivedIsComposingIndParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  384)     IURCSChatIsComposingParam* pOutParam = new IURCSChatIsComposingParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  385) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  386)     IMS_StrCpy(pOutParam->szSender, IMS_SOLUTION_URI_LEN, strRemoteUser.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  387)     pOutParam->nTimeout = nTimeout;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  388)     PostNotification(IURCSChat::RECEIVEDISCOMPOSING_IND, reinterpret_cast<IMS_UINTP>(pOutParam));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  389) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  390) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  391) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  392) void ChatSession::MessageReceived(IN IIMSession *piSession, IN IMMessage *pMessage)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  393) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  394)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  395) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  396)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : MessageReceived", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  397) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  398)     (void)piSession;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  399) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  400)     objInactivityTimer.Update();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  401) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  402) //hyejeong.yang : handling for the first MSRP with content
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  403) //MessageReceived call be call before the SessionStarted()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  404) #if 1
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  405)     if (GetState() == STATE_INVITING || GetState() == STATE_NEGOTIATING
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  406)         || GetState() == STATE_ESTABLISHING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  407)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  408)         StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  409) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  410)         SetState(STATE_ESTABLISHED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  411) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  412)         // Notify message status
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  413)         if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  414)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  415)             NotifyMessageSentInd(pSubject->GetMessageId(), IURCSIMError::NOERROR);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  416) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  417)             delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  418)             pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  419)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  420) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  421)         // Do not inform if this session is deferred message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  422)         if (nChatType != STANDFW_IMDN)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  423)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  424)             // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  425)             NotifyEstablishedInd(piChat->GetSessionId(), IURCSIMError::NOERROR);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  426)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  427)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  428) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  429) //hyejeong.yang : handling for the first MSRP with content
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  430) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  431)     if (pMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  432)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  433)         AString strContentType_;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  434) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  435)         ContentPart *pContentPart = pMessage->GetContentParts().GetAt(0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  436)         if (pContentPart != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  437)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  438)             IMS_SINT32 nType = pContentPart->GetType();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  439) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  440)             const ByteArray &objContent = pContentPart->GetContent();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  441)             strContentType_ = pContentPart->GetContentType().MakeLower();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  442) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  443)             if (IsContentsBody(strContentType_))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  444)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  445)                 HandleReceivedChatMessage(strContentType_, objContent, nType);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  446)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  447)             else if (strContentType_.StartsWith(IMConstants::CONTENT_TYPE_ISCOMPOSING))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  448)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  449)                 HandleReceivedIsComposing(strContentType_, objContent);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  450)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  451)             else if (strContentType_.StartsWith(IMConstants::CONTENT_TYPE_CPIM))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  452)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  453)                 AString strWrappedContentType;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  454)                 if (nType == ContentPart::MSG_CONTENT)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  455)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  456)                     strWrappedContentType.Append(piIMCpimMessage->GetContentType(objContent));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  457)                 }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  458)                 else //Path
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  459)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  460)                     strWrappedContentType.Append(piIMCpimMessage->GetContentType(objContent.ToString()));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  461)                 }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  462) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  463)                 if (strWrappedContentType.StartsWith(IMConstants::CONTENT_TYPE_IMDN))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  464)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  465)                     HandleReceivedIMDN(objContent);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  466)                 }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  467)                 else if (IsContentsBody(strWrappedContentType))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  468)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  469)                     HandleReceivedChatMessage(strContentType_, objContent, nType);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  470)                 }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  471)                 else if (strWrappedContentType.StartsWith(IMConstants::CONTENT_TYPE_ISCOMPOSING))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  472)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  473)                     HandleReceivedIsComposing(strContentType_, objContent);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  474)                 }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  475)                 else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  476)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  477)                     if (pRCSIMConfig->IsMultiMediaChatSupported() != IMS_TRUE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  478)                     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  479)                         IMS_TRACE_E(0, "Session-ID[%" PFLS_u "] Invalid content-type in CPIM[%s]", GetSessionId(), strWrappedContentType.GetStr(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  480)                     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  481)                     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  482)                     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  483)                         HandleReceivedChatMessage(strContentType_, objContent, nType);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  484)                     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  485)                 }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  486)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  487)             else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  488)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  489)                 IMS_TRACE_E(0, "Session-ID[%" PFLS_u "] Invalid content-type [%s]", GetSessionId(), strContentType_.GetStr(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  490)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  491) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  492)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  493)         pMessage->Destroy(); //2015-01-17 delete the temp file
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  494)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  495) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  496) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  497) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  498) void ChatSession::MessageSendFailed(IN IIMSession *piSession, IN CONST AString &strMessageId, IN IIMReasonInfo *piReason)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  499) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  500)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  501) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  502)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : MessageSendFailed : %s", GetSessionId(), strMessageId.GetStr(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  503) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  504)     (void)piSession;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  505) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  506)     IMS_SINT32 nReason = 0;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  507)     IMS_SINT32 nResCode = 0;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  508) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  509)     if (strMessageId.GetLength() == 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  510)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  511)         IMS_TRACE_E(0, MessageSendFailed : The given message id is null or empty", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  512)         return;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  513)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  514) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  515)     IMS_SINT32 nIndex = objIMMessages.GetIndex(strMessageId);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  516)     if (nIndex < 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  517)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  518)         IMS_TRACE_E(0, MessageSendFailed : An IMMessage couldn't be found in a repository", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  519)         return;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  520)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  521) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  522)     IMMessage *pMessage = objIMMessages.GetAt(nIndex);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  523)     if (pMessage == IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  524)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  525)         IMS_TRACE_E(0, MessageSendFailed : An IMMessage took out from a repository is NULL", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  526)         return;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  527)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  528) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  529)     delete pMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  530)     pMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  531) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  532)     objIMMessages.RemoveAt(nIndex);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  533) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  534)     GetErrorReason(piReason, nReason, nResCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  535) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  536)     NotifyMessageSentInd(strMessageId, nReason, nResCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  537) #else // for MSRP REPORT case
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  538) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  539)     IMS_SINT32 nReason = 0;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  540)     IMS_SINT32 nResCode = 0;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  541) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  542)     IMMessage *pIMMessage = RemoveMessageFromRepository(strMessageId, &objIMMessages);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  543) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  544)     if (pIMMessage == IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  545)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  546)         pIMMessage = RemoveMessageFromRepository(strMessageId, &objSentIMMessages);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  547)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  548) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  549)     if (pIMMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  550)     {
b6e14a99 (jeonghoon.yi  2017-09-04 08:48:57 +0900  551)         if (pRCSIMConfig->GetCountry() == RCSIMConfig::COUNTRY_US
b6e14a99 (jeonghoon.yi  2017-09-04 08:48:57 +0900  552)                 || pRCSIMConfig->GetRCSVersion() >= RCSVERSION_UP)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  553)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  554)             GetErrorReason(piReason, nReason, nResCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  555)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  556)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  557)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  558)             GetErrorReason(piReason, nReason);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  559)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  560)         NotifyMessageSentInd(strMessageId, nReason, nResCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  561) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  562)         pIMMessage->Destroy(); //delete temp file
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  563)         delete pIMMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  564)         pIMMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  565) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  566)         return;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  567)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  568)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  569)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  570)         //IMS_TRACE_D(MessageSendFailed :Cannot find this Message[%s] in the msg repository : %s",
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  571)         //    strMessageId.GetStr(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  572)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  573) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  574) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  575) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  576) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  577) void ChatSession::MessageSent(IN IIMSession *piSession, IN CONST AString &strMessageId)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  578) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  579)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  580) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  581)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : MessageSent : %s", GetSessionId(), strMessageId.GetStr(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  582) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  583)     (void)piSession;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  584) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  585) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  586)     if (strMessageId.GetLength() == 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  587)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  588)         IMS_TRACE_E(0, MessageSendFailed : The given message id is null or empty", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  589)         return;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  590)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  591) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  592)     IMS_SINT32 nIndex = objIMMessages.GetIndex(strMessageId);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  593)     if (nIndex < 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  594)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  595)         IMS_TRACE_E(0, MessageSendFailed : An IMMessage couldn't be found in a repository", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  596)         return;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  597)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  598) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  599)     IMMessage *pMessage = objIMMessages.GetAt(nIndex);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  600)     if (pMessage == IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  601)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  602)         IMS_TRACE_E(0, MessageSendFailed : An IMMessage took out from a repository is NULL", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  603)         return;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  604)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  605) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  606)     delete pMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  607)     pMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  608) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  609)     objIMMessages.RemoveAt(nIndex);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  610) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  611)     NotifyMessageSentInd(strMessageId, IURCSIMError::NOERROR);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  612) #else  // for MSRP REPORT case
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  613) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  614)     IMMessage *pIMMessage = RemoveMessageFromRepository(strMessageId, &objIMMessages);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  615) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  616)     if (pIMMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  617)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  618)         NotifyMessageSentInd(strMessageId, IURCSIMError::NOERROR);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  619)         AddMessageToRepository(pIMMessage, &objSentIMMessages); //for wating for failure delivery/IMDN
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  620)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  621)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  622)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  623)         //IMS_TRACE_D(MessageSent:Cannot find this Message[%s] in the msg repository : %s",
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  624)         //    strMessageId.GetStr(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  625)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  626) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  627) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  628) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  629) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  630) void ChatSession::SessionAlerting(IN IIMSession *piSession)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  631) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  632)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  633) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  634)     IMS_TRACE_I("Session-ID[%" PFLS_u "] SessionAlerting", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  635) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  636)     (void)piSession;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  637) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  638)     IMSMSG objMSG(SESSION_ALERTING, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  639)     HandleMessage(objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  640) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  641) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  642) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  643) void ChatSession::SessionProvisionalResponseReceived(IN IIMSession *piSession, IN IMS_SINT32 nStatusCode)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  644) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  645)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  646) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  647)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : MessageSent : %s", GetSessionId(), strMessageId.GetStr(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  648) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  649)     (void)piSession;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  650) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  651)     //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  652)     if (pRCSIMConfig->IsSupportCiq())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  653)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  654)         if (nStatusCode == 100)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  655)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  656)             CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_TRYING,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  657)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  658)         else if (nStatusCode == 180)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  659)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  660)             CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_RINGING,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  661)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  662)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  663) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  664) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  665)     IMSMSG objMSG(SESSION_PROVISIONALRES_RECEIVED, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  666)     HandleMessage(objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  667) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  668) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  669) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  670) void ChatSession::SessionClosed(IN IIMSession *piSession, IN IIMReasonInfo *piReason)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  671) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  672)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  673) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  674)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : SessionClosed", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  675) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  676)     (void)piSession;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  677) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  678)     IMS_SINT32 nReason = 0;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  679)     IMS_SINT32 nResponseCode = 0;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  680) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  681)     GetChatErrorReason(piReason, nReason, nResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  682) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  683)     IMSMSG objMSG(SESSION_CLOSED, nResponseCode, nReason);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  684)     HandleMessage(objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  685) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  686) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  687) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  688) void ChatSession::SessionNegotiated(IN IIMSession *piSession)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  689) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  690)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  691) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  692)     IMS_TRACE_I("Session-ID[%" PFLS_u "] SessionNegotiated", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  693) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  694)     IMediaDescriptor *piMediaDescriptor = piSession->GetMediaDescriptor();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  695) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  696)     if (piMediaDescriptor != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  697)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  698)         //QoS
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  699)         nDestPort = piMediaDescriptor->GetRemotePort();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  700)         IMS_TRACE_I("Session-ID[%" PFLS_u "] SessionNegotiated nDestPort = %d", GetSessionId(), nDestPort, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  701) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  702)         if (IMS_TRUE == IsQoSAvailable())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  703)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  704)             if (RCSIMConfig::OPERATOR_ATT_US == pRCSIMConfig->GetOperator())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  705)             {   //run timer after 200OK is received (ATT requirement)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  706)                 InitQoSInfo();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  707)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  708)             QoSInfoUpdate();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  709)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  710)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  711)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  712)             piChat->SetQoSNeeded(IMS_FALSE);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  713)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  714)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  715) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  716)     b200OKReceived = IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  717) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  718) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  719) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  720) void ChatSession::SessionStarted(IN IIMSession *piSession)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  721) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  722)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  723) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  724)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : SessionStarted", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  725) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  726)     (void)piSession;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  727) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  728)     IMSMSG objMSG(SESSION_STARTED, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  729)     HandleMessage(objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  730) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  731) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  732) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  733) void ChatSession::SessionStartFailed(IN IIMSession *piSession, IN IIMReasonInfo *piReason)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  734) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  735)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  736) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  737)     (void)piSession;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  738) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  739)     IMS_SINT32 nReason = 0;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  740)     IMS_SINT32 nResponseCode = 0;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  741) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  742)     if (piReason->GetReasonType() == IIMReasonInfo::REASON_TYPE_CEMA_EXCEPTION)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  743)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  744)         DestroyChat();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  745) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  746)         SetState(STATE_INITIATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  747)         StopTimer(&anTimerId[TIMER_QOS]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  748)         bIsCEMAFallback = IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  749) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  750)         RetryOnce();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  751) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  752)         return;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  753)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  754) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  755) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  756)     GetChatErrorReason(piReason, nReason, nResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  757) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  758)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : SessionStartFailed reason=%d, respCode=%d", GetSessionId(), nReason, nResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  759) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  760)     IMSMSG objMSG(SESSION_STARTFAILED, nResponseCode, nReason);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  761)     HandleMessage(objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  762) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  763) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  764) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  765) void ChatSession::SessionAborted(IN IIMSession *piSession, IN IIMReasonInfo *piReason)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  766) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  767)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  768) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  769)     (void)piSession;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  770)     (void)piReason;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  771) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  772)     IMSMSG objMSG(MEDIA_ABORTED, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  773)     HandleMessage(objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  774) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  775) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  776) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  777) void ChatSession::ChatExtended(IN IChat *piChat, IN IConference *piConference)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  778) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  779)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  780) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  781) //    IMS_TRACE_I("ChatExtended", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  782) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  783)     (void)piChat;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  784)     (void)piConference;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  785) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  786) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  787) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  788) void ChatSession::ChatExtensionFailed(IN IChat *piChat, IN IIMReasonInfo *piReason)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  789) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  790)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  791) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  792) //    IMS_TRACE_I("ChatExtensionFailed", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  793) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  794)     (void)piChat;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  795)     (void)piReason;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  796) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  797) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  798) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  799) void ChatSession::InactivityNotified()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  800) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  801)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  802) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  803)     IMSMSG objMSG(INACTIVITY_NOTIFIED, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  804)     HandleMessage(objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  805) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  806) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  807) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  808) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  809) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  810) PROTECTED VIRTUAL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  811) void ChatSession::SetQoSResult(IN IMS_RESULT nQoSResult)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  812) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  813)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  814) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  815)     IMS_TRACE_I("Session-ID[%" PFLS_u "] SetQoSResult: nQoSResult = %d", GetSessionId(), nQoSResult, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  816) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  817)     if (piChat != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  818)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  819)         // LGE_IMS_UPDATE_S jeonghoon.yi 2015/10/07
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  820)         // set network profile name
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  821)         piChat->SetNetworkProfile(strNetProfileName);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  822)         // LGE_IMS_UPDATE_E jeonghoon.yi 2015/10/07
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  823) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  824)         piChat->SetQoSSetUpResult(nQoSResult);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  825)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  826) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  827) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  828) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  829) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  830) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  831) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  832) IMS_RESULT ChatSession::GetChatErrorReason(IN IIMReasonInfo *piReason, OUT IMS_SINT32 &nReason, OUT IMS_SINT32 &nResponseCode)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  833) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  834)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  835) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  836)     //IMS_TRACE_D(GetChatErrorReason : State[%d]", GetState(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  837) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  838)     //Check Reason header in CANCEL/BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  839) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  840)     //BlackBird 5.3.3.1 Reason headers in CANCEL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  841)     //RCS5.1 ver2.0 - 3.3.4.1.7 Multidevice handling
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  842) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  843)     //a Reason header field with the protocol set to SIP and the protocol_cause set to 200
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  844) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  845)     if (piChat != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  846)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  847)         IMessage *piMessage = piChat->GetPreviousRequest(IMessage::SESSION_TERMINATE);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  848)         IMSList<AString> objHdrs;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  849)         AString strReasonTxt;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  850) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  851)         if (piMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  852)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  853)             objHdrs =  piMessage->GetHeaders(IMConstants::HEADER_REASON);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  854)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  855) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  856)         for (IMS_UINT32 i = 0; i < objHdrs.GetSize(); i++)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  857)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  858)             strReasonTxt = objHdrs.GetAt(i).GetStr();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  859)             strReasonTxt = strReasonTxt.MakeLower();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  860) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  861)             //RFC3326 : Reason: SIP ;cause=200 ;text="Call completed elsewhere"
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  862)             if (strReasonTxt.Contains(IMConstants::REASON_CALL_COMPLTED_ELSEWHERE_CAUSE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  863)                 || strReasonTxt.Contains(IMConstants::REASON_CALL_COMPLTED_ELSEWHERE_TXT))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  864)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  865)                 nReason = IURCSIMError::OTHERDEVICEANSWERED;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  866)                 IMS_TRACE_I("Session-ID[%" PFLS_u "] GetChatErrorReason : Reason = %d, ResponseCode = %d", GetSessionId(), nReason, nResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  867)                 return IMS_SUCCESS;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  868)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  869) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  870)             //ATT MSRP failure
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  871)             if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  872)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  873)                 if (strReasonTxt.Contains("480"))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  874)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  875)                     nReason = IURCSIMError::MEDIA_ERROR_RESPONSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  876)                     nResponseCode = 480;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  877)                     IMS_TRACE_I("Session-ID[%" PFLS_u "] GetChatErrorReason : Reason = %d, ResponseCode = %d", GetSessionId(), nReason, nResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  878)                     return IMS_SUCCESS;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  879)                 } else if (strReasonTxt.Contains("503"))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  880)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  881)                     nReason = IURCSIMError::CLOSEDBYREMOTE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  882)                     nResponseCode = 503;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  883)                     IMS_TRACE_I("Session-ID[%" PFLS_u "] GetChatErrorReason : Reason = %d, ResponseCode = %d", GetSessionId(), nReason, nResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  884)                     return IMS_SUCCESS;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  885)                 }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  886)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  887)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  888)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  889) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  890)     IMS_RESULT bResult;
b6e14a99 (jeonghoon.yi  2017-09-04 08:48:57 +0900  891)     if (pRCSIMConfig->GetCountry() == RCSIMConfig::COUNTRY_US
b6e14a99 (jeonghoon.yi  2017-09-04 08:48:57 +0900  892)             || pRCSIMConfig->GetRCSVersion() >= RCSVERSION_UP)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  893)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  894)         bResult = GetErrorReason(piReason, nReason, nResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  895)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  896)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  897)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  898)         bResult = GetErrorReason(piReason, nReason);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  899)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  900) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  901)     IMS_TRACE_I("Session-ID[%" PFLS_u "] GetChatErrorReason : Reason = %d, ResponseCode = %d", GetSessionId(), nReason, nResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  902) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  903)     return bResult;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  904) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  905) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  906) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  907) IMS_BOOL ChatSession::SendIMDN(
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  908)     IN CONST AString &strFrom, IN CONST AString &strTo,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  909)     IN CONST IMS_SINT32 nStatus, IN CONST AString &strMessageId, IN CONST AString &strDateTime,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  910)     IN CONST AStringArray &objIMDNRoute)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  911) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  912)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  913) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  914)     IMS_TRACE_I("Session-ID[%" PFLS_u "] SendIMDN : MessageId[%s] State[%d]", GetSessionId(), strMessageId.GetStr(), nStatus);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  915) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  916)     CpimIMDNData *piIMDNData = new CpimIMDNData();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  917) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  918)     piIMDNData->strTo = strFrom;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  919)     piIMDNData->strFrom = strTo;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  920)     piIMDNData->nStatus = nStatus;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  921)     piIMDNData->strMessageId = strMessageId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  922)     piIMDNData->strDateTime = strDateTime;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  923)     piIMDNData->objIMDNRoute = objIMDNRoute;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  924) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  925)     // set PANI
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  926)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  927)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  928)         AString strPANI = pRCSIMConfig->GetPANIHeader(piIMService);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  929)         piIMDNData->strPANI = strPANI;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  930)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  931) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  932)     ByteArray objCpimContent;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  933)     IMS_BOOL bResult = piIMCpimMessage->CreateMessage(piIMDNData, objCpimContent);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  934) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  935)     if (bResult == IMS_TRUE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  936)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  937)         IMMessage *pMessage = new IMMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  938) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  939)         pMessage->AddContentPart(new ContentPart(IMConstants::CONTENT_TYPE_CPIM, objCpimContent));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  940) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  941)         // set failure report value
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  942)         IMS_BOOL bDeliveryReport = IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  943) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  944)         piChat->SendMessage(pMessage, bDeliveryReport);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  945) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  946)         //IMMessage is deleted right after calling SendMessage
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  947)         //when the 2nd param is IMS_FALSE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  948)         if (pMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  949)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  950)             delete pMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  951)             pMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  952)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  953)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  954) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  955)     delete piIMDNData;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  956)     piIMDNData = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  957) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  958)     return bResult;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  959) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  960) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  961) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  962) IMS_BOOL ChatSession::HandleReceivedChatMessage(IN CONST AString &strContentType, IN CONST ByteArray &objContent, IN CONST IMS_SINT32 nType /* = 0 */)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  963) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  964)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  965) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  966)     IMS_TRACE_I("Session-ID[%" PFLS_u "] HandleReceivedChatMessage : type = %d", GetSessionId(), nType, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  967) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  968)     AString strMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  969)     AString _strContentType(strContentType);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  970)     AString strMessageId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  971)     AString strDateTime;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  972)     AString strDispositionType;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  973)     AString strDirection;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  974)     AStringArray objIMDNRecordRoute;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  975)     IMS_SINT32 contentType = nType;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  976) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  977)     //metric
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  978)     IMS_SINT32 contentSize = 0;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  979) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  980)     //BLACKBIRD_IM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  981)     AString strRequestURI;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  982)     AString strCPIMTo;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  983) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  984)     if (strContentType.StartsWith(IMConstants::CONTENT_TYPE_TEXT))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  985)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  986)         strMessage = (IMS_CHAR*)objContent.GetData();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  987) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  988)         // metric
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  989)         contentSize = strMessage.GetCapacity();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  990)         metricHelper->NotifyMetricReportInd(IRCSIMMETRIC::RECEIVED_IM_START_IND, IURCSIMError::NOERROR, 0, contentSize, CHAT);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  991)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  992)     else if(strContentType.StartsWith(IMConstants::CONTENT_TYPE_CPIM))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  993)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  994)         // getting CPIM message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  995)         CpimChatMessageData *piChatMessageData = new CpimChatMessageData();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  996) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  997)         IMS_BOOL bResult = IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  998)         if (nType == ContentPart::MSG_CONTENT)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900  999)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1000)             bResult = piIMCpimMessage->ParseMessage(objContent, piChatMessageData);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1001)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1002)         else if (nType == ContentPart::MSG_PATH)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1003)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1004)             bResult = piIMCpimMessage->ParseMessage(objContent.ToString(), piChatMessageData);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1005)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1006)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1007)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1008)             bResult = IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1009)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1010) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1011)         strMessage = piChatMessageData->strContent;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1012) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1013)         if (pRCSIMConfig->GetCountry() == RCSIMConfig::COUNTRY_US &&
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1014)              nType == ContentPart::MSG_PATH)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1015)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1016)             FileToDataReceivedMessage(strContentType, strMessage, contentType);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1017)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1018) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1019)         // metric
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1020)         if (contentType == ContentPart::MSG_PATH)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1021)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1022)             contentSize = metricHelper->GetFileSize(strMessage);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1023)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1024)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1025)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1026)             contentSize = strMessage.GetCapacity();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1027)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1028)         metricHelper->NotifyMetricReportInd(IRCSIMMETRIC::RECEIVED_IM_START_IND, IURCSIMError::NOERROR, 0, contentSize, CHAT);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1029) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1030)         _strContentType = piChatMessageData->strContentType; //get the wrapped-content-type
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1031) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1032)         strMessageId = piChatMessageData->strMessageId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1033)         strDateTime = piChatMessageData->strDateTime;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1034)         strDispositionType = piChatMessageData->strDisposition;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1035)         objIMDNRecordRoute = piChatMessageData->objIMDNRecordRoute;
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900 1036) 
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900 1037)         if (JanskyStatusChecker::GetInstance()->isJanskyService(GetSlotId()))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1038)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1039)             strDirection = piChatMessageData->strDirection;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1040)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1041) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1042)         delete piChatMessageData;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1043)         piChatMessageData = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1044) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1045)         if (bResult == IMS_FALSE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1046)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1047)             // metric
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1048)             metricHelper->NotifyMetricReportInd(IRCSIMMETRIC::RECEIVED_IM_END_IND, IURCSIMError::INTERNAL, 0, contentSize, CHAT);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1049)             return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1050)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1051) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1052)         //Blackbird : multi-device handling
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1053)         //RCS5.1 -2.11.3 : To notify UI with the information in case for sending display notification using SIP MESSAGE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1054)         SIPAddress objAddr(GenerateUri(strRemoteUser));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1055) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1056)         PagerIMDNHelper::GetTargetInfoForIMDN(objAddr, strRemoteDeviceId, objIMDNRecordRoute, strCPIMTo, strRequestURI, GetSlotId());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1057)         //Blackbird : multi-device handling
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1058)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1059)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1060)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1061)         IMS_TRACE_E(0, "Session-ID[%" PFLS_u "] HandleReceivedChatMessage: [%s] is not supported", GetSessionId(), strContentType.GetStr(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1062)         return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1063)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1064) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1065)     // Notify UI
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1066)     if (strMessage.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1067)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1068)         // NOTE. No need to inform display name because it always will be anonymous.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1069) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1070)         IURCSChatMessageParam *pOutParam = new IURCSChatMessageParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1071) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1072)         IMS_StrCpy(pOutParam->szSender, IMS_SOLUTION_URI_LEN, strRemoteUser.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1073)         IMS_StrCpy(pOutParam->szDisplayName, IMS_SOLUTION_DISPLAY_NAME_LEN, strDisplayName.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1074)         pOutParam->pszContent = (IMS_CHAR*)IMS_MEM_Malloc(sizeof(IMS_CHAR)*(strMessage.GetLength() + 1));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1075)         IMS_MEM_Memset(pOutParam->pszContent, 0x00,strMessage.GetLength() + 1);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1076)         if (strMessage.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1077)             IMS_StrCpy(pOutParam->pszContent, strMessage.GetLength(), strMessage.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1078)         if (strMessageId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1079)             IMS_StrCpy(pOutParam->szMessageId, IMS_SOLUTION_SESSIONID_LEN, strMessageId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1080)         if (strDateTime.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1081)             IMS_StrCpy(pOutParam->szDateTime, IMS_SOLUTION_TIME_LEN, strDateTime.GetStr());
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900 1082) 
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900 1083)         if (JanskyStatusChecker::GetInstance()->isJanskyService(GetSlotId()))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1084)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1085)             if (strDirection.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1086)                 IMS_StrCpy(pOutParam->szDirection, IMS_SOLUTION_TIME_LEN, strDirection.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1087)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1088) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1089)         pOutParam->bDisplayNotification = strDispositionType.Contains("display");
228a192d (geunchae.park 2017-09-22 20:40:03 +0900 1090)         pOutParam->bDeliveryNotification = strDispositionType.Contains("positive-delivery");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1091)         pOutParam->nType = contentType;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1092) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1093)         //hyejeong.yang : handling IMDN-Record-Route header
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1094)         pOutParam->nNumOfIMDNRoute= objIMDNRecordRoute.GetCount();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1095)         pOutParam->ppszIMDNRoute = (IMS_CHAR**)IMS_MEM_Malloc(sizeof(IMS_CHAR*) * objIMDNRecordRoute.GetCount());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1096) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1097)         for (IMS_SINT32 i = 0; i < objIMDNRecordRoute.GetCount(); i++)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1098)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1099)             AString strIMDNRoute = objIMDNRecordRoute.GetElementAt(i);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1100)             pOutParam->ppszIMDNRoute[i] = (IMS_CHAR*)IMS_MEM_Malloc(sizeof(IMS_CHAR)*(strIMDNRoute.GetLength() + 1));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1101)             IMS_StrCpy(pOutParam->ppszIMDNRoute[i], strIMDNRoute.GetLength(), strIMDNRoute.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1102)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1103)         //hyejeong.yang : handling IMDN-Record-Route header
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1104) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1105)         //BLACKBIRD_IM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1106)         if (_strContentType.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1107)             IMS_StrCpy(pOutParam->szContentType, IMS_SOLUTION_CONTENTTYPE_LEN, _strContentType.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1108)         if (strRemoteDeviceId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1109)             IMS_StrCpy(pOutParam->szImdnDeviceId, IMS_SOLUTION_URI_LEN, strRemoteDeviceId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1110)         //BLACKBIRD_IM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1111)         if (strRequestURI.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1112)             IMS_StrCpy(pOutParam->szImdnRequestURI, IMS_SOLUTION_URI_LEN, strRequestURI.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1113)         if (strCPIMTo.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1114)             IMS_StrCpy(pOutParam->szImdnCPIMTo, IMS_SOLUTION_URI_LEN, strCPIMTo.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1115)         //BLACKBIRD_IM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1116) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1117)         PostNotification(IURCSChat::RECEIVEDMESSAGE_IND, reinterpret_cast<IMS_UINTP>(pOutParam));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1118) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1119)         // metric
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1120)         metricHelper->NotifyMetricReportInd(IRCSIMMETRIC::RECEIVED_IM_END_IND, IURCSIMError::NOERROR, 0, contentSize, CHAT);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1121)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1122) 
4c3fd4b9 (geunchae.park 2017-09-06 09:26:04 +0900 1123)     if (pRCSIMConfig->GetRCSVersion() < RCSVERSION_UP && strDispositionType.Contains("positive-delivery"))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1124)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1125)         SendIMDN(RCSIMIdentity::GetAnonymousUserId(), RCSIMIdentity::GetAnonymousUserId(), (IMS_SINT32)CpimIMDNData::DELIVERED,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1126)             strMessageId, strDateTime, objIMDNRecordRoute);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1127)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1128) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1129)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1130) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1131) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1132) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1133) IMS_BOOL ChatSession::HandleReceivedIMDN(IN CONST ByteArray &objContent)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1134) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1135)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1136) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1137)     IMS_TRACE_I("Session-ID[%" PFLS_u "] HandleReceivedIMDN", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1138) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1139)     AString strMessageId;
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 1140)     IMS_SINT32 nStatus = CpimIMDNData::UNKNOWN;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1141) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1142)     CpimIMDNData *piIMDNData = new CpimIMDNData();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1143) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1144)     piIMCpimMessage->ParseMessage(objContent, piIMDNData);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1145) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1146)     for (IMS_UINT32 nIMDNBodyIndex = 0; nIMDNBodyIndex < piIMDNData->objIMDNBodyList.GetSize(); nIMDNBodyIndex++)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1147)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1148)         IMDNBodyData objIMDNBodyData = piIMDNData->objIMDNBodyList.GetAt(nIMDNBodyIndex);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1149) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1150)         strMessageId = objIMDNBodyData.strMessageId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1151)         nStatus = objIMDNBodyData.nStatus;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1152) 
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 1153)         if (0 < strMessageId.GetLength() && nStatus != CpimIMDNData::UNKNOWN)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1154)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1155)          #if 1 //for MSRP REPORT case
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1156)             //delete from the message repository
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1157)             IMMessage *pMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1158) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1159)             //the sprient sometimes send delivery noti after sending error response
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1160)             //so if the delivery noti is received and 200OK is not received, do not delete the msg from repository
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1161)             //because the message is not sent.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1162)             if (pRCSIMConfig->IsSpirentTestMode() == IMS_FALSE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1163)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1164)                 pMessage = RemoveMessageFromRepository(strMessageId, &objIMMessages);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1165)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1166) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1167)             if (pMessage == IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1168)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1169)                 pMessage = RemoveMessageFromRepository(strMessageId, &objSentIMMessages);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1170)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1171) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1172)             if (pMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1173)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1174)                 pMessage->Destroy();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1175)                 delete pMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1176)                 pMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1177)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1178)             else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1179)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1180)                 //IMS_TRACE_D(HandleReceivedIMDN:Cannot find this Message[%s] in the msg repository : %s",
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1181)                 //    strMessageId.GetStr(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1182)                 //the sprient sometimes send delivery noti after sending error response
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1183)                 //so if the delivery noti is received and 200OK is not received, do not delete the msg from repository
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1184)                 //because the message is not sent. do not notify app this case
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1185)                 if (pRCSIMConfig->IsSpirentTestMode())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1186)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1187)                     continue;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1188)                 }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1189)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1190)         #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1191)             //delete from the message repository
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1192) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1193)             IURCSIMDNParam* pOutParam = new IURCSIMDNParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1194) 
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 1195)             // jansky
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 1196)             /*if(strDirectionType.Contains("Out")) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1197)                 IMS_StrCpy(pOutParam->szRemoteUser, IMS_SOLUTION_URI_LEN, strCalledMyId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1198)                 IMS_TRACE_D("Session-ID[%" PFLS_u "] HandleReceivedIMDN Fork_out, Sender = %s", GetSessionId(), strCalledMyId.GetStr(), 0);
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 1199)             } else {*/
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 1200)                 pOutParam->strRemoteUser = strRemoteUser;
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 1201)             //}
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1202) 
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 1203)             IURCSIMDNMessageInfoParam *infoParam = new IURCSIMDNMessageInfoParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1204) 
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 1205)             infoParam->strMessageId = strMessageId;
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 1206)             infoParam->nType = nStatus;
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 1207)             infoParam->nDetailStatus = objIMDNBodyData.nDetailStatus;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1208) 
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 1209)             pOutParam->objImdnMessageInfos.Append(infoParam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1210) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1211)             // NOTE:
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1212)             // If other sessions have the message which should be sent to IMSvcThread,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1213)             // this should be located in BaseSession.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1214)             Notify(IURCSIMService::RECEIVEDIMDN_IND, 0, reinterpret_cast<IMS_UINTP>(pOutParam), GetSlotId());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1215)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1216)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1217) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1218)     delete piIMDNData;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1219)     piIMDNData = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1220) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1221)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1222) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1223) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1224) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1225) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1226) IMS_BOOL ChatSession::HandleReceivedIsComposing(IN CONST AString &strContentType, IN CONST ByteArray &objContent)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1227) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1228)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1229) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1230)     IMS_TRACE_I("Session-ID[%" PFLS_u "] HandleReceivedIsComposing", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1231) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1232)     IMS_SINT32 nTimeout = -1;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1233) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1234)     if (strContentType.StartsWith(IMConstants::CONTENT_TYPE_ISCOMPOSING))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1235)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1236)         ComposingState objComposingState;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1237) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1238)         IMS_BOOL bResult = objComposingState.Decode(objContent);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1239) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1240)         if (bResult == IMS_FALSE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1241)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1242)             IMS_TRACE_E(0, "Session-ID[%" PFLS_u "] HandleReceivedIsComposing : ComposingState Decode Failed", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1243)             return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1244)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1245) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1246)         nTimeout = objComposingState.GetTimeout();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1247) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1248)         if (objComposingState.GetState().Equals("active"))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1249)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1250)             // The <refresh> is optional. If the element is empty, use the default value.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1251)             //   composer MAY decide not to send active-state refresh messages at all.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1252)             //   This is indicated by omitting the refresh interval; this will cause
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1253)             //   the receiver to assume that it has gone idle after 120 seconds
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1254)             if (nTimeout == 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1255)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1256)                 nTimeout = 120;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1257)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1258)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1259)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1260)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1261)             nTimeout = 0;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1262)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1263) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1264)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1265)     else if (strContentType.StartsWith(IMConstants::CONTENT_TYPE_CPIM)){     //IsComposing XML is wrapped inside CPIM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1266) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1267)         CpimIsComposingData *piIsComposingData = new CpimIsComposingData();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1268) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1269)         IMS_BOOL bResult = piIMCpimMessage->ParseMessage(objContent, piIsComposingData);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1270) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1271)         if (bResult == IMS_TRUE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1272)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1273)             nTimeout  = piIsComposingData->nTimeOut;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1274)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1275) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1276)         delete piIsComposingData;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1277)         piIsComposingData = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1278)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1279)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1280)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1281)         //IMS_TRACE_E(0, HandleReceivedIsComposing: [%s] is not supported", strContentType.GetStr(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1282)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1283) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1284)     if (nTimeout != (-1))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1285)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1286)         //IURCSChatReceivedIsComposingIndParam *pOutParam = new IURCSChatReceivedIsComposingIndParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1287)         IURCSChatIsComposingParam* pOutParam = new IURCSChatIsComposingParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1288) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1289)         IMS_StrCpy(pOutParam->szSender, IMS_SOLUTION_URI_LEN, strRemoteUser.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1290)         pOutParam->nTimeout = nTimeout;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1291) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1292)         PostNotification(IURCSChat::RECEIVEDISCOMPOSING_IND, reinterpret_cast<IMS_UINTP>(pOutParam));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1293) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1294)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1295)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1296)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1297)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1298)         return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1299)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1300) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1301) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1302) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1303) IMS_BOOL ChatSession::SetContactHeaderValue(IN ISIPMessage *piSIPMessage)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1304) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1305)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1306) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1307)     IService* piService = (IService*)piIMService;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1308)     AString strContactHeaderValue = RCSContactFeatureManager::GetInstance()->GetContactBaseFeatureTags(piService);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1309)     AStringArray objContactHeaderValue;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1310)     AString strContactWithIARI;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1311) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1312)     //add +sip.oma.sip-im for default value
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1313) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1314)     if (GetSessionMode() == SIMPLE_IM_MODE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1315)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1316)         AString strOmaIMTag(IMConstants::TAG_OMA_IM);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1317)         objContactHeaderValue.AddElement(strOmaIMTag);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1318)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1319)     else if (GetSessionMode() == CPM_MODE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1320)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1321)         objContactHeaderValue.AddElement(IMConstants::TAG_CPM_SESSION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1322)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1323) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1324)     if (pRCSIMConfig->IsGeolocationPushSupported())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1325)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1326)         AString strGeolocationTag(IMConstants::TAG_GEOLOCATIONPUSH);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1327)         objContactHeaderValue.AddElement(strGeolocationTag);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1328)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1329) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1330)     // add FileTransfer IARI tag
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1331) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1332)     if (pRCSIMConfig->IsFileTransferSupported())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1333)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1334)         AString strFileTransferTag(IMConstants::TAG_FILETRANSFER);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1335)         objContactHeaderValue.AddElement(AString(IMConstants::TAG_FILETRANSFER));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1336)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1337) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1338) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1339)     // add HTTP FileTransfer IARI tag
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1340)     if (pRCSIMConfig->IsHTTPFileTransferSupported())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1341)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1342)         AString strFileTransferTag(IMConstants::TAG_HTTP_FILETRANSFER);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1343)         objContactHeaderValue.AddElement(strFileTransferTag);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1344)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1345) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1346)     IMS_BOOL bIARITag = IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1347)     for (IMS_SINT32 i = 0; i < objContactHeaderValue.GetCount(); i++)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1348)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1349)         AString strIARIContact = objContactHeaderValue.GetElementAt(i);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1350) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1351)         if (strIARIContact.Contains(IMConstants::TAG_IARI_REF))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1352)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1353)             if (bIARITag == IMS_FALSE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1354)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1355)                 bIARITag = IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1356)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1357)             else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1358)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1359)                 strIARIContact.Replace("+g.3gpp.iari-ref=\"", ",");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1360)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1361)             strIARIContact.Erase(strIARIContact.GetLength()-1, 1);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1362)             strContactWithIARI.Append(strIARIContact.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1363) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1364)             objContactHeaderValue.RemoveElementAt(i--);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1365)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1366)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1367) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1368)     if (strContactWithIARI.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1369)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1370)         strContactWithIARI.Append('\"');
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1371)         objContactHeaderValue.AddElement(strContactWithIARI.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1372)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1373) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1374)     for (IMS_SINT32 i = 0; i < objContactHeaderValue.GetCount(); i++)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1375)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1376)         const AString &strContactValue = objContactHeaderValue.GetElementAt(i);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1377)         if (strContactValue.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1378)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1379)             strContactHeaderValue.Append(TextParser::CHAR_SEMICOLON);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1380)             strContactHeaderValue.Append(strContactValue.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1381)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1382)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1383) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1384)     //ATT Requirement CDR-EMS-520
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1385)     // add mobility tag in SIP requests per RCS 3840
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1386)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US && IsMobileOriginated())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1387)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1388)         strContactHeaderValue.Append(TextParser::CHAR_SEMICOLON);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1389)         strContactHeaderValue.Append("mobility=\"mobile\"");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1390)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1391) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1392)     IMS_TRACE_D("Session-ID[%" PFLS_u "] SetContactHeaderValue[%s]\n", GetSessionId(), strContactHeaderValue.GetStr(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1393) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1394)     if (strContactHeaderValue.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1395)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1396)         piSIPMessage->SetHeader(ISIPHeader::CONTACT_NORMAL, strContactHeaderValue.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1397)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1398)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1399)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1400)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1401)         return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1402)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1403) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1404) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1405) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1406) IMS_BOOL ChatSession::SetAcceptContactHeaderValue(IN ISIPMessage *piSIPMessage, IN CONST AString &strContentType)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1407) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1408)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1409) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1410)     AString strAcceptContact;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1411)     strAcceptContact.Append(TextParser::CHAR_ASTERISK);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1412)     strAcceptContact.Append(TextParser::CHAR_SEMICOLON);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1413)     if (GetSessionMode() == SIMPLE_IM_MODE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1414)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1415)         strAcceptContact.Append(IMConstants::TAG_OMA_IM);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1416)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1417)     else if (GetSessionMode() == CPM_MODE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1418)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1419)         strAcceptContact.Append(IMConstants::TAG_CPM_SESSION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1420)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1421) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1422)     piSIPMessage->AddHeader(ISIPHeader::ACCEPT_CONTACT, strAcceptContact.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1423) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1424)     //RCS5.1 - 3.5.4.8.3.1 Sender procedures
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1425)     //add the Accept-Contact header of Geolocation/HTTP file transfer tag
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1426)     if (strContentType.Equals(IMConstants::CONTENT_TYPE_LOCATION) && pRCSIMConfig->IsGeolocationPushSupported())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1427)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1428)         AString strGeoPushAcceptContact = AString::ConstEmpty();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1429) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1430)         strGeoPushAcceptContact.Append(TextParser::CHAR_ASTERISK);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1431)         strGeoPushAcceptContact.Append(TextParser::CHAR_SEMICOLON);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1432)         strGeoPushAcceptContact.Append(IMConstants::TAG_GEOLOCATIONPUSH);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1433) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1434)         strGeoPushAcceptContact.Append(TextParser::CHAR_SEMICOLON);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1435)         strGeoPushAcceptContact.Append(IMConstants::TAG_REQUIRE);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1436) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1437)         strGeoPushAcceptContact.Append(TextParser::CHAR_SEMICOLON);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1438)         strGeoPushAcceptContact.Append(IMConstants::TAG_EXPLICIT);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1439) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1440)         piSIPMessage->AddHeader(ISIPHeader::UNKNOWN, strGeoPushAcceptContact.GetStr(), SIPHeaderName::ACCEPT_CONTACT);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1441)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1442) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1443)     if (strContentType.Equals(IMConstants::CONTENT_TYPE_FILELINK) && pRCSIMConfig->IsHTTPFileTransferSupported())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1444)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1445)         AString strHttpFtAcceptContact = AString::ConstEmpty();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1446) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1447)         strHttpFtAcceptContact.Append(TextParser::CHAR_ASTERISK);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1448)         strHttpFtAcceptContact.Append(TextParser::CHAR_SEMICOLON);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1449)         strHttpFtAcceptContact.Append(IMConstants::TAG_HTTP_FILETRANSFER);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1450) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1451)         strHttpFtAcceptContact.Append(TextParser::CHAR_SEMICOLON);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1452)         strHttpFtAcceptContact.Append(IMConstants::TAG_REQUIRE);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1453) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1454)         strHttpFtAcceptContact.Append(TextParser::CHAR_SEMICOLON);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1455)         strHttpFtAcceptContact.Append(IMConstants::TAG_EXPLICIT);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1456) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1457)         piSIPMessage->AddHeader(ISIPHeader::UNKNOWN, strHttpFtAcceptContact.GetStr(), SIPHeaderName::ACCEPT_CONTACT);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1458)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1459) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1460)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1461) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1462) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1463) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1464) IMS_RESULT ChatSession::SetTerminateReasonHeader(IN CONST IMS_SINT32 nReason)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1465) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1466)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1467) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1468)     IMS_TRACE_D("Session-ID[%" PFLS_u "] SetTerminateReasonHeader : Reason[%d]", GetSessionId(), nReason, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1469) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1470)     IMS_RESULT bResult = IMS_FAILURE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1471) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1472)     //add Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1473)     IMessage *piMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1474) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1475)     if (piChat != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1476)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1477)         piMessage = piChat->GetNextRequest();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1478)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1479) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1480)     //TMUS_add Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1481)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_TMO_US || pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_BELL_CA)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1482)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1483)         AString strReason = AString::ConstEmpty();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1484)         if (nReason == IURCSIMTerminateReason::USER_ACTION)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1485)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1486)             strReason.Append(IMConstants::REASON_200_CALL_COMPLETED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1487)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1488)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1489)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1490)             strReason.Append(IMConstants::REASON_503_SERVICE_UNVAILABLE);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1491)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1492) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1493)         if (piMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1494)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1495)             bResult = piMessage->AddHeader(IMConstants::HEADER_REASON, strReason);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1496)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1497)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1498)     //TMUS_add Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1499) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1500)     //ATT Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1501)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1502)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1503)         AString strReason = AString::ConstEmpty();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1504)         if (nReason == IURCSIMTerminateReason::USER_ACTION
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1505)             || nReason == IURCSIMTerminateReason::UNGRACEFUL_TERMINATION)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1506)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1507)             strReason.Append(IMConstants::REASON_503_SERVICE_UNVAILABLE);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1508) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1509)             if (piMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1510)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1511)                 bResult = piMessage->AddHeader(IMConstants::HEADER_REASON, strReason);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1512)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1513)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1514)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1515)     //ATT Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1516) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1517)     return bResult;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1518) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1519) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1520) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1521) void ChatSession::ClearIMMessageRepository(IN CONST IMS_BOOL bNeedAnswer /* = IMS_TRUE */)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1522) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1523)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1524) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1525)     IMS_TRACE_I("Session-ID[%" PFLS_u "] ClearIMMessageRepository : [%d]", GetSessionId(), objIMMessages.GetSize(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1526) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1527)     IMMessage *pMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1528)     while (!objIMMessages.IsEmpty())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1529)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1530)         pMessage = objIMMessages.GetAt(0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1531)         if (pMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1532)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1533)             if (bNeedAnswer)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1534)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1535)                 NotifyMessageSentInd(pMessage->GetMessageId(), IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1536)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1537) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1538)             pMessage->Destroy(); //delete all temp files if the content is file
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1539)             delete pMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1540)             pMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1541)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1542) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1543)         objIMMessages.RemoveAt(0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1544)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1545) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1546)     #if 1// for MSRP REPORT case
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1547)     while (!objSentIMMessages.IsEmpty())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1548)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1549)         pMessage = objSentIMMessages.GetAt(0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1550) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1551)         if (pMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1552)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1553)             pMessage->Destroy(); //delete all temp files if the content is file
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1554)             delete pMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1555)             pMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1556)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1557) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1558)         objSentIMMessages.RemoveAt(0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1559)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1560)     #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1561) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1562) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1563) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1564) IMS_RESULT ChatSession::AddMessageToRepository(IN IMMessage *pIMMessage, IN IMMessageRepository *pRepository)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1565) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1566)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1567) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1568) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1569)     return objRepository.Add(pIMMessage) == IMS_TRUE ? IMS_SUCCESS : IMS_FAILURE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1570) #else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1571) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1572)     if (pRepository == IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1573)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1574)         return IMS_FAILURE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1575)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1576)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1577)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1578)         return pRepository->Add(pIMMessage) == IMS_TRUE ? IMS_SUCCESS : IMS_FAILURE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1579)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1580) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1581) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1582) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1583) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1584) IMMessage* ChatSession::RemoveMessageFromRepository(IN CONST AString &strMessageId,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1585)     IN IMMessageRepository *pRepository)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1586) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1587)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1588) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1589) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1590)     if (strMessageId.GetLength() == 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1591)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1592)         IMS_TRACE_E(0, RemoveIMMeesageRepository : The given message id is null or empty", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1593)         return IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1594)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1595) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1596)     IMS_SINT32 nIndex = objIMMessages.GetIndex(strMessageId);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1597)     if (nIndex < 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1598)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1599)         IMS_TRACE_E(0, RemoveIMMeesageRepository : An IMMessage couldn't be found in a repository", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1600)         return IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1601)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1602) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1603)     IMMessage *pMessage = objIMMessages.GetAt(nIndex);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1604)     if (pMessage == IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1605)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1606)         IMS_TRACE_E(0, RemoveIMMeesageRepository : An IMMessage took out from a repository is NULL", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1607)         return IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1608)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1609) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1610)     objIMMessages.RemoveAt(nIndex);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1611) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1612)     return pMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1613) #else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1614) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1615)     if (pRepository == IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1616)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1617)         return IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1618)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1619) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1620)     if (strMessageId.GetLength() == 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1621)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1622)         //IMS_TRACE_E(0, RemoveIMMeesageRepository : The given message id is null or empty", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1623)         return IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1624)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1625) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1626)     IMS_SINT32 nIndex = pRepository->GetIndex(strMessageId);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1627)     if (nIndex < 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1628)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1629)         //IMS_TRACE_E(0, RemoveIMMeesageRepository : An IMMessage couldn't be found in a repository", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1630)         return IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1631)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1632) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1633)     IMMessage *pMessage = pRepository->GetAt(nIndex);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1634)     if (pMessage == IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1635)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1636)         //IMS_TRACE_E(0, RemoveIMMeesageRepository : An IMMessage took out from a repository is NULL", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1637)         return IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1638)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1639) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1640)     return pRepository->RemoveAt(nIndex) == IMS_TRUE ? pMessage : IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1641) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1642) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1643) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1644) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1645) IMS_BOOL ChatSession::TryRegisterAgain()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1646) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1647)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1648) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1649)     if (piChat == IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1650)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1651)         IMS_TRACE_E(0, "Session-ID[%" PFLS_u "] Chat is NULL", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1652)         return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1653)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1654) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1655)     //RCSe 1.2.2 spec - 2.2.2.7    Loss of Registration
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1656)     //RCS5.1 - 2.4.8 Loss of Registration
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1657)     //RCSImpl3.5 - ID_4_14 Instantaneous offline behaviour when offline due to a re-registration
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1658)     IMessage *piMessage = piChat->GetPreviousResponse(IMessage::SESSION_START);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1659)     RCS3gpp *pRCS3gpp = RCS3gpp::GetInstance();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1660) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1661)     if (piMessage == IMS_NULL || pRCS3gpp == IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1662)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1663)         IMS_TRACE_E(0, "Session-ID[%" PFLS_u "] IMessage or RCS3gpp is NULL", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1664)         return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1665)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1666) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1667)     //check whether the client shall attempt to register again(403Forbidden/504Server Timeout)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1668)     IMS_BOOL bRegiRequired = pRCS3gpp->IsInitialRegiRequired(piMessage);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1669) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1670)     IMS_TRACE_D("Session-ID[%" PFLS_u "] : TryRegisterAgain: bRegiRequired = %d, nRetryCount = %d", GetSessionId(), bRegiRequired, nRetryCount);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1671) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1672)     if (bRegiRequired && nRetryCount > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1673)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1674)         //IMS_TRACE_D("Notify AoS that the client shall attempt to register again.", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1675) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1676)         DestroyChat();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1677) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1678)         IMSMSG objMsg(INTERNAL_RCS_SERVICE_RESTART, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1679)         MSGService::PostMessage(RCS_APP_NAME[GetSlotId()], objMsg);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1680) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1681) #if 0 // do not apply timer to 1-to-1 chat for retry procedures.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1682)         // RCS5.1 - 2.4.8 Loss of Registration :
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1683)         // For all services except One-to-One Chat, the retry procedures will also be stopped if it takes longer than 5 seconds.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1684)         if (nRetryCount == 5)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1685)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1686)             anTimerId[TIMER_LISTENER] = StartTimer(5*1000);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1687)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1688) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1689)         SetState(STATE_PENDING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1690) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1691)         nRetryCount --;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1692) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1693)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1694)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1695) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1696)     return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1697) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1698) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1699) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1700) IMS_RESULT ChatSession::RetryBasedOnContactHeader(IN ISIPMessage *piSIPMessage)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1701) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1702)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1703) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1704)     IMS_TRACE_D("Session-ID[%" PFLS_u "] RetryBasedOnContactHeader", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1705) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1706)     IMSList<AString> objHeaders;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1707) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1708)     if (piSIPMessage == IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1709)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1710)         return IMS_FAILURE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1711)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1712) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1713)     objHeaders = piSIPMessage->GetHeaders(ISIPHeader::CONTACT_NORMAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1714) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1715)     if (objHeaders.GetSize() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1716)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1717)         SIPAddress objAddr;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1718)         objAddr.Create(objHeaders.GetAt(0));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1719)         strRetryRequestUri = objAddr.GetURI();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1720)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1721) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1722)     if (strRetryRequestUri.GetLength() <= 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1723)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1724)         return IMS_FAILURE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1725)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1726) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1727)     SetState(STATE_INITIATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1728) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1729)     RetryOnce();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1730) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1731)     return IMS_SUCCESS;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1732) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1733) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1734) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1735) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1736) IMS_RESULT ChatSession::RetryOnce()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1737) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1738)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1739) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1740)     IMS_TRACE_D("Session-ID[%" PFLS_u "] RetryOnce", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1741) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1742)     if (pRCSIMConfig->GetCountry() == RCSIMConfig::COUNTRY_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1743)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1744)         IURCSIMServiceChatInvitationParam *pParam = new IURCSIMServiceChatInvitationParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1745) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1746)         pParam->nNumOfRemoteUsers = 1;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1747)         pParam->ppszRemoteUsers = (IMS_CHAR**)IMS_MEM_Malloc(sizeof(IMS_CHAR*) * 1);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1748)         pParam->ppszRemoteUsers[0] = (IMS_CHAR*)IMS_MEM_Malloc(sizeof(IMS_CHAR)*(strRemoteUser.GetLength() + 1));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1749)         IMS_StrCpy(pParam->ppszRemoteUsers[0], strRemoteUser.GetLength(), strRemoteUser.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1750) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1751)         pParam->pszSubject = static_cast<IMS_CHAR*>(IMS_MEM_Malloc(sizeof(IMS_CHAR)*(strSubject.GetLength() + 1)));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1752)         IMS_StrCpy(pParam->pszSubject, strSubject.GetLength(), strSubject.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1753)         IMS_StrCpy(pParam->szContentType, IMS_SOLUTION_CONTENTTYPE_LEN, strContentType.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1754)         IMS_StrCpy(pParam->szMessageId, IMS_SOLUTION_SESSIONID_LEN, strMessageId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1755)         IMS_StrCpy(pParam->szConversationId, IMS_SOLUTION_ID_LEN, strChatId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1756) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1757)         //start--param only used for CPM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1758)         IMS_StrCpy(pParam->szContributionId, IMS_SOLUTION_ID_LEN, strContributionId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1759)         IMS_StrCpy(pParam->szInReplyToContributionId, IMS_SOLUTION_ID_LEN, strInReplyToContributionId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1760)         //end --param only used for CPM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1761) 
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900 1762)         if (JanskyStatusChecker::GetInstance()->isJanskyService(GetSlotId()))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1763)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1764)             IMS_StrCpy(pParam->szSelectedIMPU, IMS_SOLUTION_URI_LEN, strSelectedIMPU.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1765)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1766) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1767)         IMSMSG objMsg(IURCSChat::STARTCHAT_EX_CMD, 0, reinterpret_cast<IMS_UINTP>(pParam));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1768)         HandleMessage(objMsg);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1769)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1770)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1771)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1772)         IURCSIMServiceChatInvitationParam *pParam = new IURCSIMServiceChatInvitationParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1773) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1774)         pParam->nNumOfRemoteUsers = 1;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1775)         pParam->ppszRemoteUsers = (IMS_CHAR**)IMS_MEM_Malloc(sizeof(IMS_CHAR*) * 1);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1776)         pParam->ppszRemoteUsers[0] = (IMS_CHAR*)IMS_MEM_Malloc(sizeof(IMS_CHAR)*(strRemoteUser.GetLength() + 1));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1777)         IMS_StrCpy(pParam->ppszRemoteUsers[0], strRemoteUser.GetLength(), strRemoteUser.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1778) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1779)         pParam->pszSubject = static_cast<IMS_CHAR*>(IMS_MEM_Malloc(sizeof(IMS_CHAR)*(strSubject.GetLength() + 1)));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1780)         IMS_StrCpy(pParam->pszSubject, strSubject.GetLength(), strSubject.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1781)         IMS_StrCpy(pParam->szContentType, IMS_SOLUTION_CONTENTTYPE_LEN, strContentType.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1782)         IMS_StrCpy(pParam->szMessageId, IMS_SOLUTION_SESSIONID_LEN, strMessageId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1783)         IMS_StrCpy(pParam->szContributionId, IMS_SOLUTION_ID_LEN, strChatId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1784) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1785)         IMSMSG objMsg(IURCSChat::STARTCHAT_EX_CMD, 0, reinterpret_cast<IMS_UINTP>(pParam));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1786)         HandleMessage(objMsg);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1787)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1788) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1789)     return IMS_SUCCESS;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1790) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1791) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1792) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1793) void ChatSession::FileToDataReceivedMessage(IN CONST AString strContentType, OUT AString &strMessage, OUT IMS_SINT32 &constType)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1794) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1795)     IMS_BOOL bResult = IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1796)     IMS_SINT32 contentSize = IMUtil::GetInstance()->GetFileSize(strMessage);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1797)     IMS_TRACE_D("Session-ID[%" PFLS_u "] : FileToDataReceivedMessage contentSize = %d", GetSessionId(), contentSize, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1798) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1799)     if(contentSize < MAX_LEN_MSGBODY_SIZE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1800)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1801)         IMMessage *objMessage = new IMMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1802) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1803)         ByteArray objContent;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1804)         if (IMUtil::IM_GetContent(strMessage, objContent) == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1805)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1806)             bResult = objMessage->AddContentPart(new ContentPart(strContentType, objContent));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1807)             constType = objMessage->GetContentParts().GetAt(0)->GetType();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1808)             strMessage = objContent.ToString();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1809)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1810)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1811)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1812)             IMS_TRACE_E(0, "Session-ID[%" PFLS_u "] Getting file content is failed", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1813)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1814) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1815)         if (bResult == IMS_FALSE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1816)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1817)             IMS_TRACE_E(0, "Session-ID[%" PFLS_u "] Setting content is failed", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1818)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1819) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1820)         if (objMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1821)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1822)             delete objMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1823)             objMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1824)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1825)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1826) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1827) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1828) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1829) void ChatSession::DestroyChat()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1830) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1831)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1832) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1833)     if (piIMMsrpCiq != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1834)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1835)         piIMMsrpCiq->SetListener(this);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1836)         piIMMsrpCiq = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1837)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1838) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1839)     if (piChat != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1840)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1841)         piChat->SetListener(IMS_NULL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1842)         piIMService->GetConferenceManager()->DestroyChat(piChat);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1843)         piChat = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1844)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1845) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1846) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1847) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1848) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1849) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1850) void ChatSession::NotifyMessageSentInd(IN CONST AString &strMessageId,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1851)     IN CONST IMS_SINT32 nReason, IN CONST IMS_SINT32 nErrResponseCode/* = 0*/)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1852) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1853)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1854) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1855)     IMS_TRACE_I("Session-ID[%" PFLS_u "] NotifyMessageSentInd : MessageId[%s]", GetSessionId(), strMessageId.GetStr(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1856)     IMS_TRACE_I("Session-ID[%" PFLS_u "] NotifyMessageSentInd : Reason[%d] ResponseCode[%d]", GetSessionId(), nReason, nErrResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1857) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1858)     IURCSChatSentMessageIndParam *pOutParam = new IURCSChatSentMessageIndParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1859)     pOutParam->nResult = nReason;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1860)     pOutParam->nRespCode = nErrResponseCode;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1861)     IMS_StrCpy(pOutParam->szMessageId, IMS_SOLUTION_SESSIONID_LEN, strMessageId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1862)     PostNotification(IURCSChat::SENTMESSAGE_IND, reinterpret_cast<IMS_UINTP>(pOutParam));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1863) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1864)     // metric
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1865)     metricHelper->NotifyMetricReportInd(IRCSIMMETRIC::SEND_IM_END_IND, nReason, nErrResponseCode, 0, CHAT);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1866) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1867) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1868) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1869) void ChatSession::NotifyEstablishedInd(IN CONST AString &strSessionID, IN CONST IMS_SINT32 nReason,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1870)         IN CONST IMS_SINT32 nErrResponseCode/* = 0*/, IN CONST IMS_SINT32 nRetryAfterTime/* = -1*/,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1871)         IN CONST AString &strWarning /*= AString::ConstNull()*/)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1872) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1873)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1874) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1875)     AString strSessionId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1876) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1877)     if (strSessionID != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1878)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1879)         strSessionId = strSessionID.GetStr();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1880)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1881) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1882)     IMS_TRACE_I("Session-ID[%" PFLS_u "] NotifyEstablishedInd : SessionId[%s]", GetSessionId(), strSessionId.GetStr(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1883)     IMS_TRACE_I("Session-ID[%" PFLS_u "] NotifyEstablishedInd : Reason[%d] ResponseCode[%d]", GetSessionId(), nReason, nErrResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1884) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1885)     if (nChatType == STANDFW_IMDN)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1886)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1887)         //IMS_TRACE_I(NotifyTerminatedInd : No need to send", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1888)         return;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1889)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1890) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1891)     IURCSChatEstablishedIndParam *pOutParam = new IURCSChatEstablishedIndParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1892) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1893)     pOutParam->nResult = nReason;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1894)     pOutParam->nRespCode = nErrResponseCode;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1895)     pOutParam->nRetryAfterTime = nRetryAfterTime;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1896)     pOutParam->pszSessionId = static_cast<IMS_CHAR*>(IMS_MEM_Malloc(sizeof(IMS_CHAR)*(strSessionId.GetLength() + 1)));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1897)     IMS_MEM_Memset(pOutParam->pszSessionId, 0x00, strSessionId.GetLength() + 1);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1898)     if (strSessionId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1899)         IMS_StrCpy(pOutParam->pszSessionId, strSessionId.GetLength(), strSessionId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1900) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1901)     //BLACKBIRD_IM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1902)     pOutParam->bIMDN = piSessionCapa->IsCapable(IMSessionCapabilityInfo::IMDN);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1903)     pOutParam->bHTTPFileTransfer = piSessionCapa->IsCapable(IMSessionCapabilityInfo::HttpFileTransfer);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1904)     pOutParam->nGeolocationType = piSessionCapa->IsCapable(IMSessionCapabilityInfo::GeolocationPush);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1905)     pOutParam->bIsSupportCFS = piSessionCapa->IsCapable(IMSessionCapabilityInfo::CFS);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1906)     pOutParam->bIsSupportNFS = piSessionCapa->IsCapable(IMSessionCapabilityInfo::NFS);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1907)     //BLACKBIRD_IM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1908)     pOutParam->nSessionID = GetSessionId();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1909) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1910) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1911)     if (pRCSIMConfig->GetCountry() == RCSIMConfig::COUNTRY_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1912)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1913)         pOutParam->pszWarning = static_cast<IMS_CHAR*>(IMS_MEM_Malloc(sizeof(IMS_CHAR)*(strWarning.GetLength() + 1)));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1914)         IMS_MEM_Memset(pOutParam->pszWarning, 0x00, strWarning.GetLength() + 1);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1915)         if (strWarning.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1916)             IMS_StrCpy(pOutParam->pszWarning, strWarning.GetLength(), strWarning.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1917) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1918)         //CPM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1919)         IMS_StrCpy(pOutParam->szDeviceId, strRemoteDeviceId.GetLength(), strRemoteDeviceId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1920)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1921) //  else {}
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1922) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1923)     PostNotification(IURCSChat::CHAT_ESTABLISHED_IND, (IMS_UINTP)pOutParam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1924) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1925) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1926) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1927) void ChatSession::NotifyTerminatedInd(IN CONST IMS_SINT32 nReason)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1928) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1929)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1930) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1931)     IMS_TRACE_I("Session-ID[%" PFLS_u "] NotifyTerminatedInd : Reason[%d]", GetSessionId(), nReason, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1932) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1933)     if (nChatType == STANDFW_IMDN)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1934)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1935)         //IMS_TRACE_I(NotifyTerminatedInd : No need to send", 0, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1936)         return;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1937)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1938) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1939)     IURCSChatTerminatedIndParam *pOutParam = new IURCSChatTerminatedIndParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1940) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1941)     pOutParam->nReason = nReason;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1942)     pOutParam->nSessionID = GetSessionId();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1943)     PostNotification(IURCSChat::TERMINATED_IND, reinterpret_cast<IMS_UINTP>(pOutParam));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1944) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1945) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1946) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1947) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1948) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1949) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1950) IMS_BOOL ChatSession::HandleReceivedChatInvitation(IN CONST AString &strSender, IN IMessage *piMessage)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1951) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1952)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1953) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1954)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : HandleReceivedChatInvitation", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1955) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1956)     IMInvitationParser objImInvitationParser;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1957) 
dc5f12a8 (jeonghoon.yi  2017-12-08 08:27:10 +0900 1958)     IMS_BOOL bStandFwInvite = objImInvitationParser.IsDeferredIMInvite(strSender, piMessage, GetSlotId());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1959)     AString strContributionId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1960)     AStringArray objIMDNRecordRoute;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1961)     AString strCPIMTo;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1962)     AString strRequestURI;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1963)     AString strInReplyToContributionId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1964)     AString strReplyTo;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1965) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1966)     ISIPMessage *piSIPMessage = piMessage->GetMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1967) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1968)     IMS_SINT32 nResponse = NONE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1969)     IMS_SINT32 nResponseCode = NONE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1970) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1971)     if (bStandFwInvite)    // deferred message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1972)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1973)         // set chat type
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1974)         nChatType = ChatSession::STANDFW_IM;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1975) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1976)         AString strReferredUser = objImInvitationParser.GetHeader(piMessage, ISIPHeader::REFERRED_BY);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1977) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1978)         // Get remote user info
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1979)         if (strReferredUser.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1980)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1981)             strRemoteAddress = strReferredUser;//CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1982)             strRemoteUser = RCSIMIdentity::GetMSISDN(strReferredUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1983)             // metric
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1984)             metricHelper->SetPeerNumber(strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1985)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1986)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1987)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1988)             IMS_TRACE_I("Session-ID[%" PFLS_u "] There is no Referred-By header", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1989)             nResponse = REJECT;    // Reject
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1990)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1991)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1992)     else    // live chat
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1993)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1994)         // set chat type
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1995)          nChatType = ChatSession::LIVE_CHAT;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1996) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1997)         // Get remote user info
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1998)         strRemoteAddress = strSender;//CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 1999)         strRemoteUser = RCSIMIdentity::GetMSISDN(strSender);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2000)         // metric
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2001)         metricHelper->SetPeerNumber(strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2002) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2003)         strDisplayName = RCSIMIdentity::GetDisplayName(strSender, piMessage);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2004) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2005)         if (GetSessionMode() == SIMPLE_IM_MODE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2006)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2007)             strChatId = objImInvitationParser.GetHeader(piMessage , IMConstants::HEADER_CONTRIBUTION_ID);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2008)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2009)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2010)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2011)             strContributionId = objImInvitationParser.GetHeader(piMessage , IMConstants::HEADER_CONTRIBUTION_ID);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2012)             strInReplyToContributionId = objImInvitationParser.GetHeader(piMessage , IMConstants::HEADER_IN_REPLYTO_CONTRIBUTION_ID);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2013)             strReplyTo = objImInvitationParser.GetHeader(piMessage , IMConstants::HEADER_REPLY_TO);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2014)             strChatId = objImInvitationParser.GetHeader(piMessage , IMConstants::HEADER_CONVERSATION_ID);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2015)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2016)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2017) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2018)     //RCSe Implementation guidline 3.5 - ID_4_33_1
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2019)     //to ensure that a generated SIP request is sent back to the same device that was identified through sip.instance,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2020)     // a new Accept-Contact header is carrying only the sip.instance tag and instance identifier value
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2021)     //as well as the tags explicit and require described in RFC3841 (see [11]).
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2022)     AString strContact;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2023) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2024)     if (piSIPMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2025)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2026)         strContact = piSIPMessage->GetHeader(ISIPHeader::CONTACT_ANY).GetStr();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2027)         strRemoteDeviceId = RCSIMIdentity::GetDeviceIdentity(strContact);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2028) 
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900 2029)         if (JanskyStatusChecker::GetInstance()->isJanskyService(GetSlotId()))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2030)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2031)             TMUSLineHelper objLineHelper;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2032)             strCalledMyId = objLineHelper.GetMyLineFromIncomingMessage(piSIPMessage);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2033)             strDirectionType = objImInvitationParser.GetHeader(piMessage, "Direction");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2034) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2035)             if (!strDirectionType.Contains("Out") && !IsSupportedActivatedLine())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2036)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2037)                 if (piChat->Reject(SIPStatusCode::SC_480) == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2038)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2039)                     SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2040)                 }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2041)                 else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2042)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2043)                     SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2044)                     DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2045)                 }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2046)                 return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2047)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2048)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2049)         //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2050)         strCallId = piSIPMessage->GetHeader(ISIPHeader::CALL_ID);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2051)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2052) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2053)     // Cpim body
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2054)     ByteArray objCpimBody;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2055) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2056)     CpimChatMessageData *piCpimChatMessageData = new CpimChatMessageData();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2057) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2058)     IMCpimMessage objCpimMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2059)     if (objCpimMessage.GetCpimBody(piMessage, objCpimBody))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2060)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2061)         IMS_BOOL bResult = piIMCpimMessage->ParseMessage(objCpimBody, piCpimChatMessageData);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2062) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2063)         if (bResult == IMS_FALSE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2064)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2065)             IMS_TRACE_I("Session-ID[%" PFLS_u "] : CPIMMessage ParseReceivedChatMessage failed", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2066)             nResponse = REJECT;    // Reject
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2067)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2068) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2069)         objIMDNRecordRoute = piCpimChatMessageData->objIMDNRecordRoute;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2070) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2071)         //BlackBird - multi-device handling
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2072)         //RCS5.1 -2.11.3 : To notify UI with the information in case for sending display notification using SIP MESSAGE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2073)         //get CPIM To and Request URI for sending IMDN(using SIP MESSAGE) to the remote user's target device
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2074) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2075)         SIPAddress objAddress(strSender);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2076)         PagerIMDNHelper::GetTargetInfoForIMDN(objAddress, strRemoteDeviceId, objIMDNRecordRoute, strCPIMTo, strRequestURI, GetSlotId());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2077)         //BlackBird - multi-device handling
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2078)         IMS_TRACE_D("Session-ID[%" PFLS_u "] : ChatSession cpimTo [%s] RequestUri[%s]", GetSessionId(), strCPIMTo.GetStr(), strRequestURI.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2079) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2080)         // Check if a message is valid or not
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2081)         if (!(piCpimChatMessageData->strDisposition.Contains("positive-delivery")
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2082)             && piCpimChatMessageData->strDisposition.Contains("display")))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2083)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2084)             IMS_TRACE_D("Session-ID[%" PFLS_u "] There are no delivery and display notifications", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2085)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2086) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2087)         if (piCpimChatMessageData->strMessageId.GetLength() == 0||
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2088)             piCpimChatMessageData->strDateTime.GetLength() == 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2089)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2090)             IMS_TRACE_E(0, "Session-ID[%" PFLS_u "] There is no message information", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2091)             nResponse = REJECT;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2092)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2093) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2094)         if (!IsSupportedContentType(piCpimChatMessageData->strContentType))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2095)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2096)             nResponse = REJECT;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2097)             nResponseCode = 488;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2098)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2099)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2100) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2101)     // Send delivery notification
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2102)     // delivery-noti is triggered by App in UP
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2103) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2104)     if (piCpimChatMessageData->strDisposition.Contains("positive-delivery")
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2105)             && strRemoteUser.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2106)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2107)         SendDeliveryNotification(objIMDNRecordRoute, strRemoteUser, piCpimChatMessageData->strMessageId,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2108)                 piCpimChatMessageData->strDateTime, strRemoteDeviceId, strRequestURI, strCPIMTo);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2109)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2110) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2111)     //Start -- Notify UI for incoming chat invitation
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2112)     if (nResponse == NONE)    // Notify UI
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2113)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2114) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2115)     #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2116)         // Notify UI
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2117)         NotifyInvitationReceived(piCpimChatMessageData, bStandFwInvite, strDisplayName,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2118)                              strRemoteDeviceId, strRequestURI, strCPIMTo, strMSISDN);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2119)     #else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2120) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2121)         // Set params which will be informed UI
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2122)         IURCSIMServiceChatInvitationParam *pOutParam = new IURCSIMServiceChatInvitationParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2123) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2124)         if (strRemoteUser.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2125)             IMS_StrCpy(pOutParam->szSender, IMS_SOLUTION_URI_LEN, strRemoteUser.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2126)         if (strDisplayName.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2127)             IMS_StrCpy(pOutParam->szDisplayName, IMS_SOLUTION_DISPLAY_NAME_LEN, strDisplayName.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2128)         if (piCpimChatMessageData->strContent.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2129)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2130)             pOutParam->pszContent = (IMS_CHAR*)IMS_MEM_Malloc(sizeof(IMS_CHAR)*(piCpimChatMessageData->strContent.GetLength() + 1));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2131)             IMS_MEM_Memset(pOutParam->pszContent, 0x00, piCpimChatMessageData->strContent.GetLength() + 1);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2132)             IMS_StrCpy(pOutParam->pszContent, piCpimChatMessageData->strContent.GetLength(), piCpimChatMessageData->strContent.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2133)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2134)         if (piCpimChatMessageData->strContentType.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2135)             IMS_StrCpy(pOutParam->szContentType, IMS_SOLUTION_CONTENTTYPE_LEN, piCpimChatMessageData->strContentType.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2136)         if (piCpimChatMessageData->strMessageId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2137)             IMS_StrCpy(pOutParam->szMessageId, IMS_SOLUTION_SESSIONID_LEN, piCpimChatMessageData->strMessageId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2138)         if (piCpimChatMessageData->strDateTime.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2139)             IMS_StrCpy(pOutParam->szDateTime, IMS_SOLUTION_TIME_LEN, piCpimChatMessageData->strDateTime.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2140)         if (strChatId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2141)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2142)             if (GetSessionMode() == SIMPLE_IM_MODE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2143)                 IMS_StrCpy(pOutParam->szContributionId, IMS_SOLUTION_ID_LEN, strChatId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2144)             else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2145)                 IMS_StrCpy(pOutParam->szConversationId, IMS_SOLUTION_ID_LEN, strChatId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2146)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2147)         pOutParam->bDisplayNotification = piCpimChatMessageData->strDisposition.Contains("display");
228a192d (geunchae.park 2017-09-22 20:40:03 +0900 2148)         pOutParam->bDeliveryNotification = piCpimChatMessageData->strDisposition.Contains("positive-delivery");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2149)         pOutParam->nReceiveOnlySession = bStandFwInvite;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2150) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2151)         //hyejeong.yang : handling IMDN-Record-Route header
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2152)         pOutParam->nNumOfIMDNRoute = objIMDNRecordRoute.GetCount();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2153)         pOutParam->ppszIMDNRoute = (IMS_CHAR**)IMS_MEM_Malloc(sizeof(IMS_CHAR*) * objIMDNRecordRoute.GetCount());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2154)         for (IMS_SINT32 i = 0; i < objIMDNRecordRoute.GetCount(); i++)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2155)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2156)             AString strIMDNRoute = objIMDNRecordRoute.GetElementAt(i);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2157)             pOutParam->ppszIMDNRoute[i] = (IMS_CHAR*)IMS_MEM_Malloc(sizeof(IMS_CHAR)*(strIMDNRoute.GetLength() + 1));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2158)             IMS_StrCpy(pOutParam->ppszIMDNRoute[i], strIMDNRoute.GetLength(), strIMDNRoute.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2159)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2160)         //hyejeong.yang : handling IMDN-Record-Route header
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2161) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2162)         if (strRemoteDeviceId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2163)             IMS_StrCpy(pOutParam->szImdnDeviceId, IMS_SOLUTION_URI_LEN, strRemoteDeviceId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2164)         //BLACKBIRD_IM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2165)         if (strRequestURI.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2166)             IMS_StrCpy(pOutParam->szImdnRequestURI, IMS_SOLUTION_URI_LEN, strRequestURI.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2167)         if (strCPIMTo.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2168)             IMS_StrCpy(pOutParam->szImdnCPIMTo, IMS_SOLUTION_URI_LEN, strCPIMTo.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2169)         //BLACKBIRD_IM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2170) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2171)         if (strContributionId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2172)             IMS_StrCpy(pOutParam->szContributionId, IMS_SOLUTION_ID_LEN, strContributionId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2173)         if (strInReplyToContributionId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2174)             IMS_StrCpy(pOutParam->szInReplyToContributionId, IMS_SOLUTION_ID_LEN, strInReplyToContributionId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2175)         if (strReplyTo.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2176)             IMS_StrCpy(pOutParam->szReplyTo, IMS_SOLUTION_URI_LEN, strReplyTo.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2177) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2178)         pOutParam->nSessionID = GetSessionId();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2179) 
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900 2180)         if (JanskyStatusChecker::GetInstance()->isJanskyService(GetSlotId()))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2181)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2182)             if (strCalledMyId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2183)                 IMS_StrCpy(pOutParam->szCalledId, IMS_SOLUTION_URI_LEN, strCalledMyId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2184) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2185)             if (strDirectionType.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2186)                 IMS_StrCpy(pOutParam->szDirection, IMS_SOLUTION_URI_LEN, strDirectionType.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2187)         }
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900 2188) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2189)         // Notify ui that new invitation has received
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2190)         IMS_MSG_CreateNPostThreadMessageByName(RCS_SVC_IM_THREAD_NAME[GetSlotId()], IURCSIMService::RECEIVEDCHAT_IND, 0,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2191)                 pOutParam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2192)         #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2193)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2194)     else if (nResponse == REJECT)    // Reject
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2195)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2196)         AnswerReceivedChatInvitation(nResponse, nResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2197)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2198)     //End -- Notify UI for incoming chat invitation
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2199) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2200)     delete piCpimChatMessageData;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2201)     piCpimChatMessageData = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2202) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2203)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2204) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2205) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2206) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2207) IMS_BOOL ChatSession::HandleReceivedStandfwIMDNInvitation(IN IMessage *piMessage)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2208) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2209)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2210) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2211)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : HandleReceivedStandfwIMDNInvitation", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2212) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2213)     nChatType = STANDFW_IMDN;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2214) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2215)     IMS_SINT32 nResponse = NONE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2216)     ISIPMessage *piSIPMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2217) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2218)     if (piMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2219)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2220)         piSIPMessage = piMessage->GetMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2221)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2222) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2223)     if (piSIPMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2224)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2225)         if (piSIPMessage->GetHeaderCount(ISIPHeader::REFERRED_BY))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2226)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2227)             IMInvitationParser objImInvitationParser;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2228)             strRemoteAddress = objImInvitationParser.GetHeader(piMessage, ISIPHeader::REFERRED_BY);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2229)             strRemoteUser = RCSIMIdentity::GetMSISDN(strRemoteAddress);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2230)             // metric
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2231)             metricHelper->SetPeerNumber(strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2232)             nResponse = ACCEPT;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2233)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2234)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2235)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2236)             IMS_TRACE_D("Session-ID[%" PFLS_u "] There is no Referred-By header", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2237)             nResponse = REJECT;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2238)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2239) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2240)         //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2241)         strCallId = piSIPMessage->GetHeader(ISIPHeader::CALL_ID);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2242)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2243)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2244)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2245)         nResponse = REJECT;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2246)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2247) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2248)     AnswerReceivedChatInvitation(nResponse);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2249) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2250)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2251) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2252) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2253) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2254) IMS_BOOL ChatSession::AnswerReceivedChatInvitation(IN CONST IMS_SINT32 nResponse, IN CONST IMS_SINT32 nResponseCode /* = 0 */)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2255) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2256)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2257) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2258)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : AnswerReceivedChatInvitation : Answer[%d]", GetSessionId(), nResponse, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2259) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2260)     if (nResponse == ACCEPT)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2261)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2262)         IURCSChatAcceptCmdParam *pParam = new IURCSChatAcceptCmdParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2263) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2264)         IMSMSG objMSG(IURCSChat::ACCEPT_CMD, 0, reinterpret_cast<IMS_UINTP>(pParam));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2265)         HandleMessage(objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2266)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2267)     else if (nResponse == REJECT)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2268)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2269)         IURCSChatRejectCmdParam *pParam = new IURCSChatRejectCmdParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2270) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2271)         pParam->nResponseCode = nResponseCode;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2272)         IMSMSG objMSG(IURCSChat::REJECT_CMD, 0, reinterpret_cast<IMS_UINTP>(pParam));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2273)         HandleMessage(objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2274)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2275)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2276)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2277)         return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2278)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2279) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2280)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2281) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2282) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2283) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2284) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2285) void ChatSession::SendDeliveryNotification(IN CONST AStringArray& objIMDNRecordRoute, IN AString& strMSISDN, IN AString& strMessageId,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2286)         IN AString& strDateTime, IN AString& strRemoteDeviceId, IN AString& strRequestURI, IN AString& strCPIMTo)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2287) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2288)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2289) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2290)     IURCSIMDNParam* pParam = new IURCSIMDNParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2291) 
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 2292)     pParam->strRemoteUser = strMSISDN;
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 2293)     pParam->strDeviceId = strRemoteDeviceId;
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 2294)     pParam->strRequestURI = strRequestURI;
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 2295)     pParam->strCPIMTo = strCPIMTo;
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 2296)     pParam->strConversationId = strChatId;
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 2297)     pParam->strContributionId = strContributionId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2298) 
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 2299)     pParam->objImdnRoutes = objIMDNRecordRoute;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2300) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2301)     IURCSIMDNMessageInfoParam *infoParam = new IURCSIMDNMessageInfoParam();
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 2302) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2303)     infoParam->strMessageId = strMessageId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2304)     infoParam->strDateTime = strDateTime;
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 2305)     infoParam->nType = IURCSIMDNMessageInfoParam::IMDN_TYPE::DELIVERY;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2306)     infoParam->nOriginalMsgType = IURCSIMDNMessageInfoParam::MSG_TYPE::CHAT;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2307) 
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 2308)     pParam->objImdnMessageInfos.Append(infoParam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2309) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2310)     IMSMSG objMSG(IURCSIMService::SENDIMDN_CMD, 0, reinterpret_cast<IMS_UINTP>(pParam));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2311)     MSGService::PostMessage(RCS_SVC_IM_NAME[GetSlotId()], objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2312) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2313) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2314) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2315) IMS_BOOL ChatSession::IsContentsBody(IN CONST AString& strContentType)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2316) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2317)     return strContentType.StartsWith(IMConstants::CONTENT_TYPE_TEXT)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2318)             || strContentType.StartsWith(IMConstants::CONTENT_TYPE_FILELINK)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2319)             || strContentType.StartsWith(IMConstants::CONTENT_TYPE_LOCATION)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2320)             || strContentType.StartsWith(IMConstants::CONTENT_TYPE_STICKER);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2321) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2322) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2323) /*
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2324) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2325) Basically, 281 engine checks if the incoming request's is acceptable.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2326) Use this function in the case which the matching iari tag is not included in Accept-Contact header like sticker
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2327) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2328) */
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2329) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2330) IMS_BOOL ChatSession::IsSupportedContentType(IN CONST AString& strContentType)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2331) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2332)     if (strContentType.StartsWith(IMConstants::CONTENT_TYPE_STICKER))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2333)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2334)         return pRCSIMConfig->IsStickerSupported();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2335)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2336)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2337) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2338) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2339) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2340) IMS_BOOL ChatSession::IsSupportedActivatedLine()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2341) {
6cc83d71 (sungcheol.ahn 2017-07-18 10:55:27 +0900 2342)     AString strUser = strCalledMyId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2343) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2344)     if (strCalledMyId.StartsWith(TextParser::CHAR_PLUS))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2345)     {
6cc83d71 (sungcheol.ahn 2017-07-18 10:55:27 +0900 2346)     //if received number with "+", remove '+' and prefix code
6cc83d71 (sungcheol.ahn 2017-07-18 10:55:27 +0900 2347)         strUser = strCalledMyId.GetSubStr(2);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2348)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2349) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2350)     if(!strActivatedLines.Contains(strUser)) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2351)         IMS_TRACE_D("Session-ID[%" PFLS_u "] IsSupportedActivatedLine() DisActivatedLine", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2352)         return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2353)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2354)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2355) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2356) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2357) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2358) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2359) void ChatSession::NotifyInvitationReceived(IN CpimChatMessageData *piCpimChatMessageData, IN IMS_BOOL bStandFwInvite, IN AString &strDisplayName,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2360)         IN AString &strRemoteDeviceId, IN AString &strRequestURI, IN AString &strCPIMTo, IN AString &strMSISDN)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2361) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2362)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2363) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2364)     AString strContent = piCpimChatMessageData->strContent;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2365)     AString strMessageId = piCpimChatMessageData->strMessageId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2366)     AString strDateTime = piCpimChatMessageData->strDateTime;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2367)     AString strDisposition = piCpimChatMessageData->strDisposition;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2368)     AStringArray objIMDNRecordRoute = piCpimChatMessageData->objIMDNRecordRoute;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2369)     AString strContentType = piCpimChatMessageData->strContentType;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2370) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2371)     // Set params which will be informed UI
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2372)     IURCSIMServiceReceivedChatIndParam *pOutParam = new IURCSIMServiceReceivedChatIndParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2373) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2374)     if (strMSISDN.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2375)         IMS_StrCpy(pOutParam->szSender, IMS_SOLUTION_URI_LEN, strMSISDN.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2376) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2377)     if (strDisplayName.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2378)         IMS_StrCpy(pOutParam->szDisplayName, IMS_SOLUTION_DISPLAY_NAME_LEN, strDisplayName.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2379) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2380)     pOutParam->pszSubject = (IMS_CHAR*) IMS_MEM_Malloc(sizeof(IMS_CHAR) * (strContent.GetLength() + 1));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2381)     IMS_MEM_Memset(pOutParam->pszSubject, 0x00, strContent.GetLength() + 1);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2382)     if (strContent.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2383)         IMS_StrCpy(pOutParam->pszSubject, strContent.GetLength(), strContent.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2384) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2385)     if (strMessageId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2386)         IMS_StrCpy(pOutParam->szMessageId, IMS_SOLUTION_SESSIONID_LEN, strMessageId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2387) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2388)     if (strDateTime.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2389)         IMS_StrCpy(pOutParam->szDateTime, IMS_SOLUTION_TIME_LEN, strDateTime.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2390) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2391)     if (strContributionId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2392)         IMS_StrCpy(pOutParam->szContributionId, IMS_SOLUTION_TIME_LEN, strContributionId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2393) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2394)     pOutParam->bDisplayNotification = strDisposition.Contains("display");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2395)     pOutParam->bDeferredMessages = bStandFwInvite;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2396)     //hyejeong.yang : handling IMDN-Record-Route header
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2397)     pOutParam->nNumOfIMDNRoute = objIMDNRecordRoute.GetCount();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2398)     pOutParam->ppszIMDNRoute = (IMS_CHAR**) IMS_MEM_Malloc(sizeof(IMS_CHAR*) * objIMDNRecordRoute.GetCount());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2399)     if (objIMDNRecordRoute.GetCount() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2400)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2401)         for (IMS_SINT32 i = 0; i < objIMDNRecordRoute.GetCount(); i++)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2402)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2403)             AString strIMDNRoute = objIMDNRecordRoute.GetElementAt(i);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2404)             pOutParam->ppszIMDNRoute[i] = (IMS_CHAR*) IMS_MEM_Malloc(sizeof(IMS_CHAR) * (strIMDNRoute.GetLength() + 1));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2405)             IMS_StrCpy(pOutParam->ppszIMDNRoute[i], strIMDNRoute.GetLength(), strIMDNRoute.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2406)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2407)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2408)     //hyejeong.yang : handling IMDN-Record-Route header
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2409)     //BLACKBIRD_IM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2410)     if (strContentType.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2411)         IMS_StrCpy(pOutParam->szContentType, IMS_SOLUTION_CONTENTTYPE_LEN, strContentType.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2412) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2413)     //BLACKBIRD_IM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2414)     if (strRemoteDeviceId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2415)         IMS_StrCpy(pOutParam->szDeviceId, IMS_SOLUTION_URI_LEN, strRemoteDeviceId.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2416) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2417)     //BLACKBIRD_IM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2418)     if (strRequestURI.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2419)         IMS_StrCpy(pOutParam->szRequestURI, IMS_SOLUTION_URI_LEN, strRequestURI.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2420) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2421)     if (strCPIMTo.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2422)         IMS_StrCpy(pOutParam->szCPIMTo, IMS_SOLUTION_URI_LEN, strCPIMTo.GetStr());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2423) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2424)     //BLACKBIRD_IM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2425)     pOutParam->nSessionID = GetSessionId();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2426)     // Notify ui that new invitation has received
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2427)     IMS_MSG_CreateNPostThreadMessageByName(RCS_SVC_IM_THREAD_NAME[GetSlotId()], IURCSIMService::RECEIVEDCHAT_IND, 0,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2428)                 pOutParam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2429) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2430) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2431) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2432) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2433) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2434) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2435) IMS_BOOL ChatSession::StateINITIATED_Start(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2436) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2437)     if (pRCSIMConfig->GetIMMessageTechnology() == RCSIMConfig::TYPE_SIMPLE_IM)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2438)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2439)         return StateINITIATED_Start_SIMPLEIM(objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2440)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2441)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2442)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2443)         return StateINITIATED_Start_CPM(objMSG);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2444)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2445) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2446) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2447) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2448) IMS_BOOL ChatSession::StateINITIATED_Start_SIMPLEIM(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2449) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2450)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2451) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2452) //    IURCSChatStartChatCmdParam *pInParam = REINTERPRET_CAST(IURCSChatStartChatCmdParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2453)     IURCSIMServiceChatInvitationParam *pInParam = REINTERPRET_CAST(IURCSIMServiceChatInvitationParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2454) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2455)     IMS_TRACE_I("Session-ID[%" PFLS_u "] StateINITIATED_Start_SIMPLEIM", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2456)     IMS_TRACE_D("Session-ID[%" PFLS_u "] StateINITIATED_Start_SIMPLEIM : Subject[%s] RemoteUser[%s]", GetSessionId(), pInParam->pszSubject, pInParam->ppszRemoteUsers[0]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2457) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2458)     if (!pRCSIMConfig->IsChatSupported())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2459)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2460)         IMS_TRACE_E(0, "Session-ID[%" PFLS_u "] StateINITIATED_Start_SIMPLEIM : not supported", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2461) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2462)         // Notify sending failed
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2463)         NotifyMessageSentInd(pInParam->szMessageId, IURCSIMError::INVALIDOPERATION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2464) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2465)         // Notify establising failed
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2466)         NotifyEstablishedInd(IMS_NULL, IURCSIMError::INVALIDOPERATION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2467)         SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2468) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2469)         //Send next pending Message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2470)         IMS_MSG_CreateNPostThreadMessageByName(RCS_SVC_IM_NAME[GetSlotId()], SEND_QUEUED_MESSAGE, GetSessionId(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2471) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2472)         delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2473)         pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2474) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2475)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2476)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2477)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2478) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2479)     AString strTarget;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2480) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2481)     if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2482)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2483)         delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2484)         pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2485)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2486) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2487)     // Set the given params
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2488)     strRemoteUser = pInParam->ppszRemoteUsers[0];
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2489)     // metric
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2490)     metricHelper->SetPeerNumber(strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2491) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2492)     strSubject = pInParam->pszSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2493)     strMessageId = pInParam->szMessageId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2494)     strContentType = pInParam->szContentType;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2495) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2496)     strChatId = pInParam->szContributionId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2497) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2498)     // Create a Chat
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2499)     piChat = piIMService->GetConferenceManager()->CreateChat();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2500)     piChat->SetListener(this);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2501) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2502)     //RCS_NA_TMUS : retry once based on Contact header
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2503)     if (GetOldState () == STATE_NEGOTIATING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2504)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2505)         strTarget = strRetryRequestUri; //Retry based on contact header in previous error response
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2506)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2507)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2508)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2509)         strTarget =  GenerateUri(strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2510)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2511)     //RCS_NA_TMUS : retry once based on Contact header
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2512) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2513)     //Init the session
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2514)     if (piChat->Init(piIMService->GetLocalUserId().ToString(), strTarget) == IMS_FAILURE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2515)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2516)         // Notify establising failed
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2517)         NotifyEstablishedInd(IMS_NULL, IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2518) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2519)         delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2520)         pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2521) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2522)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2523)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2524)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2525) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2526)     //set Success/Failure Report
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2527)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_TMO_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2528)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2529)         piChat->SetReport(IMS_TRUE);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2530)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2531) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2532)     // Set an initial message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2533)     if (strSubject.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2534)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2535)         pSubject = new IMMessage(strMessageId);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2536)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2537) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2538)     // Set the accept-types and accept-wrapped-types
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2539)     IMediaDescriptor *piMediaDescriptor = piChat->GetMediaDescriptor();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2540) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2541)     if (piMediaDescriptor != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2542)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2543)         piMediaDescriptor->AddAttribute(SDPAttribute::ACCEPT_TYPES, pRCSIMConfig->GetChatAcceptTypes());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2544)         piMediaDescriptor->AddAttribute(SDPAttribute::ACCEPT_WRAPPED_TYPES, pRCSIMConfig->GetChatAcceptWrappedTypes());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2545) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2546)         piSessionCapa->SetLocalSessionCapability(pRCSIMConfig->GetChatAcceptTypes(), pRCSIMConfig->GetChatAcceptWrappedTypes());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2547)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2548) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2549)     IMessage *piMessage = piChat->GetNextRequest();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2550)     ISIPMessage *piSIPMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2551) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2552)     if (piMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2553)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2554)         //OMA SIMPLE IM MODE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2555)         piMessage->AddHeader(IMConstants::HEADER_CONTRIBUTION_ID, strChatId);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2556)         piSIPMessage = piMessage->GetMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2557) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2558)         AString _strSubject = strSubject.GetStr();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2559)         _strSubject.Replace(TextParser::STR_LF, "");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2560) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2561)         if (strContentType.StartsWith(IMConstants::CONTENT_TYPE_TEXT) && _strSubject.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2562)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2563)             RCSSIMOperator *pRCSSIMOperator = RCSSIMOperator::GetInstance();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2564)             AString strOperator(pRCSSIMOperator->GetOperator(GetSlotId()));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2565)             if (!strOperator.EqualsIgnoreCase("LGU"))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2566)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2567)                 //add Subject header only when user sends text message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2568)                 piMessage->AddHeader(IMConstants::HEADER_SUBJECT, _strSubject);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2569)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2570)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2571)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2572) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2573) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2574)     if (piSIPMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2575)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2576)         //set the Contact header of the INVITE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2577)         //RCS5.1 - "3.5.4.8.1 Configuration and capability exchange
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2578)         //The contact header of INVITE/200OK contains FT via HTTP/Geolocation tag for the case only a group chat
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2579) #if 1
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2580)         SetContactHeaderValue(piSIPMessage);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2581) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2582)         //set the Accept-Contact header of the INVITE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2583) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2584)         SetAcceptContactHeaderValue(piSIPMessage, strContentType);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2585)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2586) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2587)     if (strSubject.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2588)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2589)         // Set a CPIM/IMDN message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2590)         CpimChatMessageData *piChatMessageData = new CpimChatMessageData();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2591) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2592)         piChatMessageData->strTo = RCSIMIdentity::GetAnonymousUserId();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2593)         piChatMessageData->strFrom = RCSIMIdentity::GetAnonymousUserId();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2594) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2595)         //piChatMessageData->strDateTime//default;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2596)         AString strDisposition("positive-delivery");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2597) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2598)         if (pRCSIMConfig->IsDisplayNotificationRequestEnabled())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2599)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2600)             strDisposition.Append(", display");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2601)         }
c0eb03c1 (jeonghoon.yi  2017-09-28 16:07:57 +0900 2602) 
c0eb03c1 (jeonghoon.yi  2017-09-28 16:07:57 +0900 2603)         // we don't know if the server supports NFS, so 'interworking' is always added in INVITE.
c0eb03c1 (jeonghoon.yi  2017-09-28 16:07:57 +0900 2604)         if (pRCSIMConfig->GetRCSVersion() >= RCSVERSION_UP)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2605)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2606)             strDisposition.Append(", interworking");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2607)         }
c0eb03c1 (jeonghoon.yi  2017-09-28 16:07:57 +0900 2608) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2609)         piChatMessageData->strDisposition = strDisposition;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2610)         piChatMessageData->strMessageId = strMessageId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2611) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2612)         piChatMessageData->strContent = strSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2613)         piChatMessageData->strContentType = strContentType;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2614) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2615)         // cpim content
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2616)         ByteArray objCpimContent;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2617)         if (piIMCpimMessage->CreateMessage(piChatMessageData, objCpimContent))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2618)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2619)             AString strContentLength;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2620)             strContentLength.SetNumber(objCpimContent.GetLength());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2621) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2622)             if (piMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2623)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2624)                 IMessageBodyPart *pBodyPart = piMessage->CreateBodyPart();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2625)                 pBodyPart->SetHeader(IMConstants::HEADER_CONTENT_TYPE, IMConstants::CONTENT_TYPE_CPIM);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2626)                 pBodyPart->SetHeader(IMConstants::HEADER_CONTENT_LEN, strContentLength);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2627)                 pBodyPart->SetContent(objCpimContent);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2628)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2629)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2630)         delete piChatMessageData;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2631)         piChatMessageData = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2632)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2633) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2634)     if (piIMServiceState->GetState() != IIMServiceState::STATE_ENABLED)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2635)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2636)         if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2637)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2638)             delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2639)             pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2640)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2641) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2642)         delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2643)         pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2644) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2645)         DestroyChat();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2646) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2647)         //Send INVITE request after registration is restored
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2648)         SetState(STATE_PENDING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2649) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2650)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2651)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2652) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2653)     // LGE_IMS_UPDATE_S jeonghoon.yi 2015/10/07
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2654)     // set network profile name
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2655)     piChat->SetNetworkProfile(strNetProfileName);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2656)     // LGE_IMS_UPDATE_E jeonghoon.yi 2015/10/07
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2657) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2658)     // Send an invitation
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2659)     if (piChat->Start() == IMS_FAILURE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2660)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2661)         if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2662)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2663)             NotifyMessageSentInd(pSubject->GetMessageId(), IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2664) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2665)             delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2666)             pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2667)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2668) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2669)         // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2670)         NotifyEstablishedInd(IMS_NULL, IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2671) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2672)         SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2673) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2674)         //Send next pending Message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2675)         IMS_MSG_CreateNPostThreadMessageByName(RCS_SVC_IM_NAME[GetSlotId()], SEND_QUEUED_MESSAGE, GetSessionId(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2676) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2677)         delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2678)         pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2679) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2680)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2681) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2682)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2683)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2684) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2685)     // Set state
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2686)     SetState(STATE_INVITING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2687) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2688)     // Set timer
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2689)     // Sometimes the client does not receive any responses.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2690)     anTimerId[TIMER_LISTENER] = StartTimer(IMConstants::MAX_WAIT_TIME);//(200*1000);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2691) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2692)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2693)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2694) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2695)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2696) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2697) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2698) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2699) IMS_BOOL ChatSession::StateINITIATED_Start_CPM(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2700) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2701)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2702) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2703)     //IURCSChatStartChatExCmdParam *pInParam = REINTERPRET_CAST(IURCSChatStartChatExCmdParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2704)     IURCSIMServiceChatInvitationParam *pInParam = REINTERPRET_CAST(IURCSIMServiceChatInvitationParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2705) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2706)     IMS_TRACE_I("Session-ID[%" PFLS_u "] StateINITIATED_Start_CPM", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2707)     IMS_TRACE_D("Session-ID[%" PFLS_u "] StateINITIATED_Start_CPM : Subject[%s] RemoteUser[%s]\n", GetSessionId(), pInParam->pszSubject, pInParam->ppszRemoteUsers[0]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2708) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2709)     if (!pRCSIMConfig->IsChatSupported())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2710)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2711)         IMS_TRACE_E(0, "Session-ID[%" PFLS_u "] StateINITIATED_Start_CPM : not supported", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2712) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2713)         // Notify sending failed
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2714)         NotifyMessageSentInd(pInParam->szMessageId, IURCSIMError::INVALIDOPERATION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2715) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2716)         // Notify establising failed
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2717)         NotifyEstablishedInd(IMS_NULL, IURCSIMError::INVALIDOPERATION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2718)         SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2719) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2720)         //Send next pending Message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2721)         IMS_MSG_CreateNPostThreadMessageByName(RCS_SVC_IM_NAME[GetSlotId()], SEND_QUEUED_MESSAGE, GetSessionId(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2722) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2723)         delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2724)         pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2725) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2726)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2727)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2728)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2729) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2730)     if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2731)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2732)         delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2733)         pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2734)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2735) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2736)     AString strTarget;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2737) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2738)     // Set the given params
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2739)     strRemoteUser = pInParam->ppszRemoteUsers[0];
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2740)     // metric
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2741)     metricHelper->SetPeerNumber(strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2742) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2743)     strSubject = pInParam->pszSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2744)     strMessageId = pInParam->szMessageId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2745)     strContentType = pInParam->szContentType;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2746) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2747)     strChatId = pInParam->szConversationId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2748) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2749)     //CPM
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2750)     strContributionId = pInParam->szContributionId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2751)     strInReplyToContributionId = pInParam->szInReplyToContributionId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2752) 
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900 2753)     if (JanskyStatusChecker::GetInstance()->isJanskyService(GetSlotId()))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2754)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2755)         strSelectedIMPU = pInParam->szSelectedIMPU;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2756)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2757) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2758)     // Create a Chat
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2759)     piChat = piIMService->GetConferenceManager()->CreateChat();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2760)     piChat->SetListener(this);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2761) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2762)     //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2763)     if (pRCSIMConfig->IsSupportCiq())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2764)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2765)         piIMMsrpCiq = piChat->GetIMMsrpCiq();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2766)         if (piIMMsrpCiq != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2767)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2768)             piIMMsrpCiq->SetListener(this);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2769)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2770)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2771) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2772)     //RCS_NA_TMUS : retry once based on Contact header
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2773)     if (GetOldState () == STATE_NEGOTIATING)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2774)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2775)         strTarget = strRetryRequestUri; //Retry based on contact header in previous error response
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2776)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2777)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2778)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2779)         strTarget =  GenerateUri(strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2780)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2781)     //RCS_NA_TMUS : retry once based on Contact header
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2782) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2783)     //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2784)     strRemoteAddress = strTarget;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2785) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2786)     //Init the session
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2787)     if (piChat->Init(piIMService->GetLocalUserId().ToString(), strTarget) == IMS_FAILURE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2788)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2789)         // Notify establising failed
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2790)         NotifyEstablishedInd(IMS_NULL, IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2791) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2792)         delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2793)         pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2794) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2795)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2796)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2797)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2798) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2799)     //set Success/Failure Report
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2800)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_TMO_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2801)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2802)         piChat->SetReport(IMS_TRUE);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2803)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2804) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2805)     // Set an initial message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2806)     if (strSubject.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2807)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2808)         pSubject = new IMMessage(strMessageId);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2809)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2810) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2811)     // Set the Contribution-ID
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2812)     //SetContributionId(strContributionId);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2813) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2814)     // Set the accept-types and accept-wrapped-types
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2815)     IMediaDescriptor *piMediaDescriptor = piChat->GetMediaDescriptor();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2816) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2817)     if (piMediaDescriptor != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2818)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2819)         piMediaDescriptor->AddAttribute(SDPAttribute::ACCEPT_TYPES, pRCSIMConfig->GetChatAcceptTypes());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2820)         piMediaDescriptor->AddAttribute(SDPAttribute::ACCEPT_WRAPPED_TYPES, pRCSIMConfig->GetChatAcceptWrappedTypes());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2821) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2822)         piSessionCapa->SetLocalSessionCapability(pRCSIMConfig->GetChatAcceptTypes(), pRCSIMConfig->GetChatAcceptWrappedTypes());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2823) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2824)         //CEMA
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2825)         if (pRCSIMConfig->IsSupportCEMA())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2826)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2827)             if (bIsCEMAFallback == IMS_FALSE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2828)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2829)                 piMediaDescriptor->AddAttribute(IMConstants::CEMA_ATTRIBITE);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2830)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2831)             else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2832)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2833)                 bIsCEMAFallback = IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2834)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2835)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2836) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2837)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2838) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2839)     IMessage *piMessage = piChat->GetNextRequest();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2840)     ISIPMessage *piSIPMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2841) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2842)     if (piMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2843)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2844)         piSIPMessage = piMessage->GetMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2845)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2846) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2847)     if (piSIPMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2848)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2849)         piSIPMessage->AddHeader(ISIPHeader::UNKNOWN,strContributionId, "Contribution-ID");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2850)         piSIPMessage->AddHeader(ISIPHeader::UNKNOWN,strChatId, "Conversation-ID");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2851) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2852)         if (strInReplyToContributionId.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2853)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2854)             piSIPMessage->AddHeader(ISIPHeader::UNKNOWN,strInReplyToContributionId, "InReplyTo-Contribution-ID");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2855)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2856) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2857)         AString _strSubject = strSubject.GetStr();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2858)         _strSubject.Replace(TextParser::STR_LF, "");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2859) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2860)         if (strContentType.StartsWith(IMConstants::CONTENT_TYPE_TEXT) && _strSubject.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2861)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2862)             //add Subject header only when user sends text message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2863)             piMessage->AddHeader(IMConstants::HEADER_SUBJECT, _strSubject);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2864)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2865)         //set the Contact header of the INVITE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2866)         //RCS5.1 - "3.5.4.8.1 Configuration and capability exchange
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2867)         //The contact header of INVITE/200OK contains FT via HTTP/Geolocation tag for the case only a group chat
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2868) #if 1
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2869)         SetContactHeaderValue(piSIPMessage);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2870) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2871)         //set the Accept-Contact header of the INVITE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2872) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2873)         SetAcceptContactHeaderValue(piSIPMessage, strContentType);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2874) 
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900 2875)         if (JanskyStatusChecker::GetInstance()->isJanskyService(GetSlotId()))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2876)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2877)             TMUSLineHelper objLineHelper;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2878)             objLineHelper.SetPAssociatedFromHeader(piIMService, piSIPMessage, strSelectedIMPU);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2879)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2880)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2881) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2882)     if (strSubject.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2883)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2884)         // Set a CPIM/IMDN message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2885)         CpimChatMessageData *piChatMessageData = new CpimChatMessageData();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2886) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2887)         piChatMessageData->strTo = RCSIMIdentity::GetAnonymousUserId();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2888)         piChatMessageData->strFrom = RCSIMIdentity::GetAnonymousUserId();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2889) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2890)         //piChatMessageData->strDateTime//default;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2891)         AString strDisposition("positive-delivery");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2892) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2893)         if (pRCSIMConfig->IsDisplayNotificationRequestEnabled())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2894)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2895)             strDisposition.Append(", display");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2896)         }
28c525cb (geunchae.park 2017-09-08 13:04:39 +0900 2897)         if (piSessionCapa->IsCapable(IMSessionCapabilityInfo::NFS))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2898)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2899)             strDisposition.Append(", interworking");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2900)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2901)         piChatMessageData->strDisposition = strDisposition;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2902)         piChatMessageData->strMessageId = strMessageId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2903) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2904)         piChatMessageData->strContent = strSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2905)         piChatMessageData->strContentType = strContentType;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2906) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2907)         // cpim content
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2908)         ByteArray objCpimContent;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2909)         if (piIMCpimMessage->CreateMessage(piChatMessageData, objCpimContent))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2910)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2911)             AString strContentLength;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2912)             strContentLength.SetNumber(objCpimContent.GetLength());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2913) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2914)             if (piMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2915)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2916)                 IMessageBodyPart *pBodyPart = piMessage->CreateBodyPart();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2917)                 pBodyPart->SetHeader(IMConstants::HEADER_CONTENT_TYPE, IMConstants::CONTENT_TYPE_CPIM);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2918)                 pBodyPart->SetHeader(IMConstants::HEADER_CONTENT_LEN, strContentLength);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2919)                 pBodyPart->SetContent(objCpimContent);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2920)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2921)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2922)         delete piChatMessageData;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2923)         piChatMessageData = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2924)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2925) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2926)     if (piIMServiceState->GetState() != IIMServiceState::STATE_ENABLED)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2927)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2928)         if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2929)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2930)             delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2931)             pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2932)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2933) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2934)         delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2935)         pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2936) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2937)         DestroyChat();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2938) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2939)         //Send INVITE request after registration is restored
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2940)         SetState(STATE_PENDING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2941) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2942)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2943)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2944) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2945)     // LGE_IMS_UPDATE_S jeonghoon.yi 2015/10/07
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2946)     // set network profile name
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2947)     piChat->SetNetworkProfile(strNetProfileName);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2948)     // LGE_IMS_UPDATE_E jeonghoon.yi 2015/10/07
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2949) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2950)     // Send an invitation
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2951)     if (piChat->Start() == IMS_FAILURE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2952)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2953)         if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2954)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2955)             NotifyMessageSentInd(pSubject->GetMessageId(), IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2956) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2957)             delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2958)             pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2959)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2960) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2961)         // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2962)         NotifyEstablishedInd(IMS_NULL, IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2963) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2964)         SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2965) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2966)         //Send next pending Message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2967)         IMS_MSG_CreateNPostThreadMessageByName(RCS_SVC_IM_NAME[GetSlotId()], SEND_QUEUED_MESSAGE, GetSessionId(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2968) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2969)         delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2970)         pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2971) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2972)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2973) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2974)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2975)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2976) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2977)     //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2978)     if (pRCSIMConfig->IsSupportCiq())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2979)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2980)         IMessage *piStartMessage = piChat->GetPreviousRequest(IMessage::SESSION_START);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2981)         ISIPMessage *piStartSIPMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2982) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2983)         if (piStartMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2984)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2985)             piStartSIPMessage = piStartMessage->GetMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2986)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2987) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2988)         //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2989)         if (piStartSIPMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2990)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2991)             strCallId = piStartSIPMessage->GetHeader(ISIPHeader::CALL_ID);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2992)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2993)         strLocalUserId = piIMService->GetLocalUserId().GetURI();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2994) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2995)         CIQSIPStart(strRemoteUser, strLocalUserId, strTarget,strCallId);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2996) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2997)         CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_INVITE,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2998)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 2999) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3000)     // Set state
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3001)     SetState(STATE_INVITING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3002) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3003)     // Set timer
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3004)     // Sometimes the client does not receive any responses.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3005)     IMS_UINT32 nWaitTime = IMConstants::MAX_WAIT_TIME;//200s
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3006) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3007)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_TMO_US || pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_BELL_CA)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3008)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3009)         nWaitTime = IMConstants::MAX_200_WAIT_TIME_TMUS; //10s
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3010)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3011) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3012)     anTimerId[TIMER_LISTENER] = StartTimer(nWaitTime);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3013) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3014)     //QoS
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3015)     if (IMS_TRUE == IsQoSAvailable())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3016)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3017)         if (RCSIMConfig::OPERATOR_TMO_US == pRCSIMConfig->GetOperator())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3018)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3019)             InitQoSInfo();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3020)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3021)         piChat->SetQoSNeeded(IMS_TRUE);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3022)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3023) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3024)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3025)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3026) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3027)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3028) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3029) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3030) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3031) IMS_BOOL ChatSession::StatePENDING_ServiceStart(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3032) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3033)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3034) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3035)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StatePENDING_ServiceStart", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3036) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3037)     (void)objMSG;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3038) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3039)     SetState(STATE_INITIATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3040) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3041)     RetryOnce();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3042) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3043)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3044) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3045) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3046) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3047) IMS_BOOL ChatSession::StatePENDING_Close(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3048) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3049)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3050) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3051)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StatePENDING_Close", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3052) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3053)     IURCSChatTerminateCmdParam *pInParam = REINTERPRET_CAST(IURCSChatTerminateCmdParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3054) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3055)     if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3056)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3057)         NotifyMessageSentInd(pSubject->GetMessageId(), IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3058) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3059)         delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3060)         pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3061)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3062) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3063)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3064)     NotifyEstablishedInd(IMS_NULL, IURCSIMError::USERACTION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3065) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3066)     SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3067) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3068)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3069)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3070) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3071)     DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3072) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3073)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3074) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3075) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3076) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3077) IMS_BOOL ChatSession::StateINVITING_Close(IN IMSMSG & objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3078) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3079)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3080) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3081)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateINVITING_Close", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3082) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3083)     IURCSChatTerminateCmdParam *pInParam = REINTERPRET_CAST(IURCSChatTerminateCmdParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3084) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3085)     StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3086) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3087)     // Cancel by the originator
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3088)     IMS_RESULT bResult = piChat->Close();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3089) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3090)     if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3091)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3092)         SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3093)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3094)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3095)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3096)         SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3097)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3098) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3099)     //Send next pending Message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3100)     IMS_MSG_CreateNPostThreadMessageByName(RCS_SVC_IM_NAME[GetSlotId()], SEND_QUEUED_MESSAGE, GetSessionId(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3101) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3102)     if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3103)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3104)         NotifyMessageSentInd(pSubject->GetMessageId(), IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3105) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3106)         delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3107)         pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3108)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3109) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3110)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3111)     NotifyEstablishedInd(IMS_NULL, IURCSIMError::USERACTION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3112) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3113)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3114)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3115) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3116)     if (bResult != IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3117)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3118)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3119)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3120) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3121)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3122) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3123) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3124) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3125) IMS_BOOL ChatSession::StateINVITING_SessionProvisionalResReceived(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3126) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3127)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3128) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3129)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : STATE_INVITING_SessionProvisionalResReceived", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3130) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3131)     (void)objMSG;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3132) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3133)     SetState(STATE_NEGOTIATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3134)     //notify that the first msg is sent
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3135)     //when first provisional is received(StateINVITING_SessionProvisionalResReceived)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3136) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3137)     if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3138)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3139)         NotifyMessageSentInd(pSubject->GetMessageId(), IURCSIMError::NOERROR);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3140)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3141) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3142)     IMS_MSG_CreateNPostThreadMessageByName(RCS_SVC_IM_NAME[GetSlotId()], SESSION_PRO_RES_RECEIVED, GetSessionId(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3143) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3144)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3145) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3146) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3147) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3148) IMS_BOOL ChatSession::StateINVITING_SessionStartFailed(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3149) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3150)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3151) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3152)     IMS_SINT32 nErrorReason = LONG_TO_SINT(objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3153)     IMS_SINT32 nErrorResponse = LONG_TO_SINT(objMSG.nWparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3154) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3155)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateINVITING_SessionStartFailed : Reason = %d, Response = %d",
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3156)                 GetSessionId(), nErrorReason, nErrorResponse);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3157) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3158)     IMS_SINT32 nMSGSentStatus = nErrorReason;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3159)     IMessage *piMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3160)     ISIPMessage *piSIPMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3161)     IMS_SINT32 nStatusCode = 0;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3162)     IMS_SINT32 nRetryAfterTime = -1;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3163)     AString strWarning;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3164) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3165)     StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3166)     StopTimer(&anTimerId[TIMER_QOS]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3167) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3168)     //wait for registration
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3169)     if (TryRegisterAgain())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3170)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3171)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3172)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3173) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3174)     // Set state
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3175)     SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3176) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3177)     if (piChat != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3178)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3179)         piMessage = piChat->GetPreviousResponse(IMessage::SESSION_START);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3180)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3181) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3182)     if (piMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3183)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3184)         piSIPMessage = piMessage->GetMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3185) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3186)         nStatusCode = piMessage->GetStatusCode();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3187)         if (nStatusCode == 486 || nStatusCode == 487)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3188)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3189)             //486 Busy Here or 487 Request Terminated
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3190)             nMSGSentStatus = IURCSIMError::NOERROR;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3191)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3192)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3193) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3194)     if (piSIPMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3195)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3196)         AString strRetryAfterTime = piSIPMessage->GetHeader(ISIPHeader::RETRY_AFTER_ANY);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3197) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3198)         if (strRetryAfterTime.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3199)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3200)             nRetryAfterTime = strRetryAfterTime.ToInt32();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3201)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3202) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3203)         strWarning = piSIPMessage->GetHeader(ISIPHeader::WARNING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3204) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3205)         IMS_TRACE_D("Session-ID[%" PFLS_u "] StateINVITING_SessionStartFailed : strWarning = %s ", GetSessionId(), strWarning.GetStr(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3206)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3207) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3208)     // 1. When it fails due to NON-403 or NON-503 response
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3209)     // 2. When it fails to send INVITE for 5 consecutive retries(403), stop the retry
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3210)     if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3211)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3212)         //notify that the first msg is sent
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3213)         //when first provisional is received(StateINVITING_SessionProvisionalResReceived)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3214) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3215)         if (nMSGSentStatus != IURCSIMError::NOERROR)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3216) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3217)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3218)             NotifyMessageSentInd(pSubject->GetMessageId(), nMSGSentStatus, nStatusCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3219)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3220) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3221)         delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3222)         pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3223)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3224) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3225)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3226)     NotifyEstablishedInd(IMS_NULL, nErrorReason, nErrorResponse, nRetryAfterTime, strWarning);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3227) 
6c529b85 (kyujong.lee   2017-11-17 11:52:28 +0900 3228)     if (IMS_TRUE == bIsMobileOriginated)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3229)     {
6c529b85 (kyujong.lee   2017-11-17 11:52:28 +0900 3230)         RcsSipErrorHandler::Get(GetSlotId())->HandleErrorForMOInvite(piSIPMessage);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3231)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3232) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3233)     //Send next pending Message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3234)     IMS_MSG_CreateNPostThreadMessageByName(RCS_SVC_IM_NAME[GetSlotId()], SEND_QUEUED_MESSAGE, GetSessionId(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3235) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3236)     DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3237) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3238)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3239) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3240) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3241) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3242) IMS_BOOL ChatSession::StateINVITING_TimerExpired(IN IMSMSG & objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3243) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3244)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3245) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3246)     IMS_UINTP nExpiredTimerId = objMSG.nLparam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3247) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3248)     IMS_TRACE_D("Session-ID[%" PFLS_u "] : StateINVITING_TimerExpired : TID[%" PFLS_u "]", GetSessionId(), nExpiredTimerId, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3249) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3250)     if (anTimerId[TIMER_LISTENER] == nExpiredTimerId)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3251)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3252)         StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3253) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3254)         //Abort(IURCSIMError::NOANSWER);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3255)         // Cancel by the originator
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3256)         IMS_RESULT bResult = piChat->Close();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3257) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3258)         if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3259)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3260)             SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3261)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3262)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3263)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3264)             SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3265)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3266) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3267)         //Send next pending Message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3268)         IMS_MSG_CreateNPostThreadMessageByName(RCS_SVC_IM_NAME[GetSlotId()], SEND_QUEUED_MESSAGE, GetSessionId(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3269) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3270)         if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3271)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3272)             NotifyMessageSentInd(pSubject->GetMessageId(), IURCSIMError::NOANSWER);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3273) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3274)             delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3275)             pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3276)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3277) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3278)         // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3279)         NotifyEstablishedInd(IMS_NULL, IURCSIMError::NOANSWER);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3280) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3281)         if (bResult != IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3282)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3283)             DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3284)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3285) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3286)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3287) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3288)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3289) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3290) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3291) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3292) IMS_BOOL ChatSession::StateNEGOTIATING_InvitationReceived(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3293) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3294)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3295) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3296)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateNEGOTIATING_InvitationReceived", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3297) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3298)     IIMChatInviteReceivedParam *pInParam = REINTERPRET_CAST(IIMChatInviteReceivedParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3299)     AString strSender = pInParam->strSender;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3300) 
74a9fb7c (sungcheol.ahn 2017-11-28 18:02:01 +0900 3301)     if (JanskyStatusChecker::GetInstance()->isJanskyService(GetSlotId()))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3302)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3303)         strActivatedLines = pInParam->strActivatedLines;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3304)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3305) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3306)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3307)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3308) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3309)     // check invitation validity
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3310)     IMInvitationChecker objIMInvitationChecker;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3311)     IMS_UINT32 nResponseCode = objIMInvitationChecker.IsChatAcceptable(piIMService, piChat, GetSlotId());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3312) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3313)     if (nResponseCode != 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3314)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3315)         IMS_RESULT bResult = piChat->Reject(nResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3316) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3317)         if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3318)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3319)             SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3320)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3321)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3322)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3323)             SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3324)             DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3325)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3326)         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3327)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3328) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3329)     // handle invite
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3330)     IMessage *piMessage = piChat->GetPreviousRequest(IMessage::SESSION_START);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3331) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3332)     if (RCSIMIdentity::GetMSISDN(strSender).Equals(STR_DEFERRED_NOTI_URI_NAME))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3333)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3334)         IMS_TRACE_D("Session-ID[%" PFLS_u "] ___Deferred Notification___", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3335) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3336)         HandleReceivedStandfwIMDNInvitation(piMessage);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3337)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3338)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3339)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3340)         HandleReceivedChatInvitation(strSender, piMessage);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3341)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3342) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3343)     //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3344)     if (pRCSIMConfig->IsSupportCiq())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3345)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3346)         strLocalUserId = piIMService->GetLocalUserId().GetURI();//for CIQ 1.19
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3347)         CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_INVITE,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3348)         CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_RINGING,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3349)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3350) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3351)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3352) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3353) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3354) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3355) IMS_BOOL ChatSession::StateNEGOTIATING_Accept(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3356) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3357)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3358) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3359)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateNEGOTIATING_Accept", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3360) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3361)     AString strRemoteAcceptTypes;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3362)     AString strRemoteAcceptWrappedTypes;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3363)     AString strRemoteContact;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3364) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3365)     IURCSChatAcceptCmdParam *pInParam = REINTERPRET_CAST(IURCSChatAcceptCmdParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3366) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3367)     IMediaDescriptor *piMediaDescriptor = piChat->GetMediaDescriptor();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3368) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3369)     if (piMediaDescriptor != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3370)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3371)         if (piMediaDescriptor->GetAttribute(SDPAttribute::ACCEPT_TYPES).GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3372)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3373)             //get the received accept-types value
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3374)             strRemoteAcceptTypes = piMediaDescriptor->GetAttribute(SDPAttribute::ACCEPT_TYPES).GetStr();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3375)             SDPAttribute objAttr;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3376)             objAttr.SetValue(SDPAttribute::ACCEPT_TYPES,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3377)             piMediaDescriptor->GetAttribute(SDPAttribute::ACCEPT_TYPES));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3378)             piMediaDescriptor->RemoveAttribute(objAttr);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3379)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3380) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3381)         if (piMediaDescriptor->GetAttribute(SDPAttribute::ACCEPT_WRAPPED_TYPES).GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3382)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3383)             //get the received accept-wrapped-types value
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3384)             strRemoteAcceptWrappedTypes = piMediaDescriptor->GetAttribute(SDPAttribute::ACCEPT_WRAPPED_TYPES).GetStr();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3385) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3386)             SDPAttribute objAttr;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3387)             objAttr.SetValue(SDPAttribute::ACCEPT_WRAPPED_TYPES,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3388)             piMediaDescriptor->GetAttribute(SDPAttribute::ACCEPT_WRAPPED_TYPES));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3389)             piMediaDescriptor->RemoveAttribute(objAttr);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3390)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3391) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3392)         piMediaDescriptor->AddAttribute(SDPAttribute::ACCEPT_TYPES, pRCSIMConfig->GetChatAcceptTypes());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3393)         piMediaDescriptor->AddAttribute(SDPAttribute::ACCEPT_WRAPPED_TYPES, pRCSIMConfig->GetChatAcceptWrappedTypes());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3394)         piSessionCapa->SetLocalSessionCapability(pRCSIMConfig->GetChatAcceptTypes(), pRCSIMConfig->GetChatAcceptWrappedTypes());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3395)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3396) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3397)     IMessage *piMessage = piChat->GetPreviousRequest(IMessage::SESSION_START); //get the contact header value from remote user's INVITE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3398)     ISIPMessage *piSIPMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3399) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3400)     if (piMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3401)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3402)         piSIPMessage = piMessage->GetMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3403)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3404) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3405)     //RCSe Implementation guidline 3.5 - ID_4_33_1
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3406)     //to ensure that a generated SIP request is sent back to the same device that was identified through sip.instance,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3407)     // a new Accept-Contact header is carrying only the sip.instance tag and instance identifier value
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3408)     //as well as the tags explicit and require described in RFC3841 (see [11]).
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3409)     if (piSIPMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3410)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3411)         if (piSIPMessage->GetHeaderCount(ISIPHeader::CONTACT_NORMAL))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3412)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3413)             strRemoteContact = piSIPMessage->GetHeader(ISIPHeader::CONTACT_NORMAL).GetStr();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3414)             strRemoteDeviceId = RCSIMIdentity::GetDeviceIdentity(strRemoteContact);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3415)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3416)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3417) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3418)     IMessage *piResponseMessage = piChat->GetNextResponse();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3419)     ISIPMessage* piResSIPMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3420) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3421)     if (piResponseMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3422)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3423)         piResSIPMessage = piResponseMessage->GetMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3424) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3425)         if (piResSIPMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3426)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3427)             SetContactHeaderValue(piResSIPMessage);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3428)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3429)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3430) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3431)     piSessionCapa->SetRemoteSessionCapability(strRemoteContact, strRemoteAcceptTypes, strRemoteAcceptWrappedTypes);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3432) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3433)     // LGE_IMS_UPDATE_S jeonghoon.yi 2015/10/07
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3434)     // set network profile name
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3435)     piChat->SetNetworkProfile(strNetProfileName);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3436)     // LGE_IMS_UPDATE_E jeonghoon.yi 2015/10/07
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3437) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3438)     IMS_RESULT bResult = piChat->Accept();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3439) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3440)     anTimerId[TIMER_LISTENER] = StartTimer(IMConstants::MAX_WAIT_TIME);//(15*1000);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3441) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3442)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3443)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3444) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3445)     //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3446)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3447)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3448)         CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_ANSWERED,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3449)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3450) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3451)     if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3452)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3453)         SetState(STATE_ESTABLISHING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3454)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3455)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3456)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3457)         // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3458)         NotifyEstablishedInd(IMS_NULL, IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3459) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3460)         if (piChat->Reject(480) == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3461)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3462)             SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3463)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3464)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3465)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3466)             SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3467) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3468)             DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3469)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3470)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3471) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3472)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3473) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3474) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3475) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3476) IMS_BOOL ChatSession::StateNEGOTIATING_Reject(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3477) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3478)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3479) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3480)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateNEGOTIATING_Reject", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3481) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3482)     IURCSChatRejectCmdParam *pInParam = REINTERPRET_CAST(IURCSChatRejectCmdParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3483) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3484)     IMS_RESULT bResult = IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3485)     if (pInParam->nResponseCode != NONE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3486)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3487)         bResult = piChat->Reject(pInParam->nResponseCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3488)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3489)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3490)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3491)         bResult = piChat->Reject();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3492)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3493) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3494)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3495)     NotifyEstablishedInd(IMS_NULL, IURCSIMError::USERACTION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3496) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3497)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3498)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3499) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3500)     if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3501)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3502)         SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3503)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3504)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3505)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3506)         SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3507)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3508)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3509) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3510)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3511) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3512) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3513) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3514) IMS_BOOL ChatSession::StateNEGOTIATING_Close(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3515) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3516)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3517) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3518)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateNEGOTIATING_Close", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3519) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3520)     IURCSChatTerminateCmdParam *pInParam = REINTERPRET_CAST(IURCSChatTerminateCmdParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3521) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3522)     StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3523) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3524)     // Cancel by the originator
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3525)     IMS_RESULT bResult = piChat->Close();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3526) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3527)     anTimerId[TIMER_LISTENER] = StartTimer(IMConstants::MAX_WAIT_TIME);//(15*1000);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3528) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3529)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3530)     NotifyEstablishedInd(IMS_NULL, IURCSIMError::USERACTION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3531) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3532)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3533)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3534) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3535)     if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3536)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3537)         SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3538)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3539)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3540)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3541)         SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3542) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3543)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3544)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3545) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3546)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3547) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3548) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3549) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3550) IMS_BOOL ChatSession::StateNEGOTIATING_SessionProvisionalResReceived(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3551) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3552)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3553) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3554)     IMS_TRACE_D("Session-ID[%" PFLS_u "] : StateNEGOTIATING_SessionProvisionalResReceived", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3555) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3556)     (void)objMSG;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3557) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3558)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3559) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3560) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3561) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3562) IMS_BOOL ChatSession::StateNEGOTIATING_SessionAlerting(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3563) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3564)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3565) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3566)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateNEGOTIATING_SessionAlerting", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3567) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3568)     (void)objMSG;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3569) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3570)     //notify that the first msg is sent
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3571)     //when first provisional is received(StateINVITING_SessionProvisionalResReceived)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3572) #if 1
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3573)     if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3574)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3575)         NotifyMessageSentInd(pSubject->GetMessageId(), IURCSIMError::NOERROR);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3576) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3577)         delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3578)         pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3579)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3580) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3581)     IURCSChatAlertingIndParam *pOutParam = new IURCSChatAlertingIndParam();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3582) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3583)     PostNotification(IURCSChat::ALERTING_IND, reinterpret_cast<IMS_UINTP>(pOutParam));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3584) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3585)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3586) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3587) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3588) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3589) IMS_BOOL ChatSession::StateNEGOTIATING_SessionStarted(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3590) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3591)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3592) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3593)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateNEGOTIATING_SessionStarted", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3594) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3595)     (void)objMSG;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3596) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3597)     StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3598) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3599)     AString strRemoteContact;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3600)     AString strRemoteAcceptTypes;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3601)     AString strRemoteAcceptWrappedTypes;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3602) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3603)     IMediaDescriptor *piMediaDescriptor = piChat->GetMediaDescriptor();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3604) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3605)     if (piMediaDescriptor != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3606)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3607)         if (piMediaDescriptor->GetAttribute(SDPAttribute::ACCEPT_TYPES).GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3608)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3609)             strRemoteAcceptTypes = piMediaDescriptor->GetAttribute(SDPAttribute::ACCEPT_TYPES).GetStr();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3610)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3611) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3612)         if (piMediaDescriptor->GetAttribute(SDPAttribute::ACCEPT_WRAPPED_TYPES).GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3613)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3614)             strRemoteAcceptWrappedTypes = piMediaDescriptor->GetAttribute(SDPAttribute::ACCEPT_WRAPPED_TYPES).GetStr();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3615)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3616)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3617) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3618)     //new AC : IM SESSION TIMER : after the timer expire, the session will be closed.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3619)     objInactivityTimer.SetListener(this);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3620)     objInactivityTimer.Listen(pRCSIMConfig->GetIMSessionTimerValue()*1000);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3621) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3622)     IMessage *piMessage = piChat->GetPreviousResponse(IMessage::SESSION_START); //get the contact header value from remote user's 200OK
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3623)     ISIPMessage *piSIPMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3624) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3625)     if (piMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3626)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3627)         piSIPMessage = piMessage->GetMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3628)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3629) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3630)     //RCSe Implementation guidline 3.5 - ID_4_33_1
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3631)     //to ensure that a generated SIP request is sent back to the same device that was identified through sip.instance,
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3632)     // a new Accept-Contact header is carrying only the sip.instance tag and instance identifier value
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3633)     //as well as the tags explicit and require described in RFC3841 (see [11]).
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3634)     if (piSIPMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3635)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3636)         if (piSIPMessage->GetHeaderCount(ISIPHeader::CONTACT_NORMAL))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3637)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3638)             strRemoteContact = piSIPMessage->GetHeader(ISIPHeader::CONTACT_NORMAL).GetStr();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3639)             strRemoteDeviceId = RCSIMIdentity::GetDeviceIdentity(strRemoteContact);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3640)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3641)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3642) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3643)     piSessionCapa->SetRemoteSessionCapability(strRemoteContact, strRemoteAcceptTypes,strRemoteAcceptWrappedTypes);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3644) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3645)     // Set state
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3646)     SetState(STATE_ESTABLISHED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3647) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3648)     // Notify message status
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3649)     if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3650)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3651)         NotifyMessageSentInd(pSubject->GetMessageId(), IURCSIMError::NOERROR);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3652) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3653)         delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3654)         pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3655)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3656) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3657)     //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3658)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3659)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3660)         CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_ANSWERED,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3661)         CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_CONNECTED,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3662)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3663) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3664)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3665)     NotifyEstablishedInd(piChat->GetSessionId(), IURCSIMError::NOERROR);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3666) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3667)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3668) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3669) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3670) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3671) IMS_BOOL ChatSession::StateNEGOTIATING_SessionStartFailed(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3672) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3673)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3674) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3675)     IMS_SINT32 nErrorReason = LONG_TO_SINT(objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3676)     IMS_SINT32 nErrorResponse = LONG_TO_SINT(objMSG.nWparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3677)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateNEGOTIATING_SessionStartFailed : Reason = %d, Response = %d",
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3678)                         GetSessionId(), nErrorReason, nErrorResponse);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3679) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3680)     IMS_SINT32 nMSGSentStatus = nErrorReason;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3681)     IMessage *piMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3682)     ISIPMessage *piSIPMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3683)     IMS_SINT32 nStatusCode = 0;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3684)     IMS_SINT32 nRetryAfterTime = -1;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3685)     AString strWarning;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3686) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3687)     StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3688)     StopTimer(&anTimerId[TIMER_QOS]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3689) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3690)     if (bIsMobileOriginated == IMS_TRUE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3691)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3692)         //wait for registration
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3693)         if (TryRegisterAgain())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3694)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3695)             return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3696)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3697) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3698)         // 1. When it fails due to NON-403 or NON-503 response
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3699)         // 2. When it fails to send INVITE for 5 consecutive retries(403), stop the retry
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3700) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3701)         if (piChat != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3702)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3703)             piMessage = piChat->GetPreviousResponse(IMessage::SESSION_START);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3704)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3705) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3706)         if (piMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3707)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3708)             piSIPMessage = piMessage->GetMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3709) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3710)             nStatusCode = piMessage->GetStatusCode();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3711)             if (nStatusCode == 486 || nStatusCode == 487)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3712)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3713)                 //486 Busy Here or 487 Request Terminated
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3714)                 nMSGSentStatus = IURCSIMError::NOERROR;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3715)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3716)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3717) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3718)         if (piSIPMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3719)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3720)             AString strRetryAfterTime = piSIPMessage->GetHeader(ISIPHeader::RETRY_AFTER_ANY);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3721) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3722)             if (strRetryAfterTime.GetLength() > 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3723)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3724)                 nRetryAfterTime = strRetryAfterTime.ToInt32();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3725)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3726) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3727)             strWarning = piSIPMessage->GetHeader(ISIPHeader::WARNING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3728) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3729)             IMS_TRACE_D("Session-ID[%" PFLS_u "] : StateNEGOTIATING_SessionStartFailed : strWarning = %s ", GetSessionId(), strWarning.GetStr(), 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3730) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3731)             DestroyChat();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3732) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3733)             //RCS NA_TMUS : retry once based on Contact header
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3734)             if (pRCSIMConfig->GetCountry() == RCSIMConfig::COUNTRY_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3735)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3736)                 if (strRetryRequestUri.GetLength() == 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3737)                         && (nStatusCode == 300 || nStatusCode == 301 || nStatusCode == 302 || nStatusCode == 305))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3738)                 {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3739)                     if (RetryBasedOnContactHeader(piSIPMessage) == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3740)                     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3741)                         return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3742)                     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3743)                 }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3744)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3745)             //RCS NA_TMUS
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3746)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3747) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3748) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3749)         if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3750)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3751)            //notify that the first msg is sent
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3752)            //when first provisional is received(StateINVITING_SessionProvisionalResReceived)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3753) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3754)             if (nMSGSentStatus != IURCSIMError::NOERROR)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3755) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3756)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3757)                 NotifyMessageSentInd(pSubject->GetMessageId(), nMSGSentStatus, nStatusCode);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3758)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3759) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3760)             delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3761)             pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3762)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3763) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3764)         if (IMS_TRUE == IsQoSAvailable() && IMS_TRUE == b200OKReceived
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3765)                 && IMS_FAILURE == bQoSSetupResult)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3766)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3767)             IMS_TRACE_D("Change error reason [%d] to [-20]", nErrorReason, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3768)             nErrorReason = IURCSIMError::DEDICATED_BEARER_SETUP_FAILED;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3769)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3770)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3771) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3772)     // Set state
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3773)     SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3774) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3775)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3776)     NotifyEstablishedInd(IMS_NULL, nErrorReason, nErrorResponse, nRetryAfterTime, strWarning);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3777) 
6c529b85 (kyujong.lee   2017-11-17 11:52:28 +0900 3778)     if (IMS_TRUE == bIsMobileOriginated)
6c529b85 (kyujong.lee   2017-11-17 11:52:28 +0900 3779)     {
6c529b85 (kyujong.lee   2017-11-17 11:52:28 +0900 3780)         RcsSipErrorHandler::Get(GetSlotId())->HandleErrorForMOInvite(piSIPMessage);
6c529b85 (kyujong.lee   2017-11-17 11:52:28 +0900 3781)     }
6c529b85 (kyujong.lee   2017-11-17 11:52:28 +0900 3782) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3783)     DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3784) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3785)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3786) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3787) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3788) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3789) IMS_BOOL ChatSession::StateNEGOTIATING_SessionClosed(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3790) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3791)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3792) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3793)     IMS_SINT32 nErrorReason = LONG_TO_SINT(objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3794)     IMS_SINT32 nErrorResponse = LONG_TO_SINT(objMSG.nWparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3795) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3796)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateNEGOTIATING_SessionClosed : Reason = %d", GetSessionId(), nErrorReason, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3797) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3798)     // NOTE:
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3799)     // This is the case that the session has closed by the incoming CANCEL
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3800) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3801)     if (IMS_TRUE == IsQoSAvailable() && IMS_TRUE == IsMobileOriginated()
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3802)             && IMS_TRUE == b200OKReceived && IMS_FAILURE == bQoSSetupResult)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3803)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3804)         IMS_TRACE_D("Change error reason [%d] to [-20]", nErrorReason, 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3805)         nErrorReason = IURCSIMError::DEDICATED_BEARER_SETUP_FAILED;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3806)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3807) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3808)     // Set state
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3809)     SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3810) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3811)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3812)     NotifyEstablishedInd(IMS_NULL, nErrorReason, nErrorResponse);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3813) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3814)     DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3815) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3816)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3817) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3818) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3819) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3820) IMS_BOOL ChatSession::StateNEGOTIATING_TimerExpired(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3821) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3822)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3823) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3824)     IMS_UINTP nExpiredTimerId = objMSG.nLparam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3825) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3826)     IMS_TRACE_D("Session-ID[%" PFLS_u "] : StateNEGOTIATING_TimerExpired : TID[%" PFLS_u "]", GetSessionId(), nExpiredTimerId, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3827) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3828)     if (anTimerId[TIMER_LISTENER] == nExpiredTimerId)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3829)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3830)         StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3831) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3832)         //only if the 200OK is not received within some times.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3833)         if (b200OKReceived)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3834)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3835)             return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3836)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3837) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3838)         IMS_RESULT bResult = piChat->Close();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3839) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3840)         if (pSubject != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3841)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3842)             NotifyMessageSentInd(pSubject->GetMessageId(), IURCSIMError::NOANSWER);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3843) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3844)             delete pSubject;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3845)             pSubject = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3846)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3847) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3848)         // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3849)         NotifyEstablishedInd(IMS_NULL, IURCSIMError::NOANSWER);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3850) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3851)         if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3852)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3853)             SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3854)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3855)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3856)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3857)             SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3858)             DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3859)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3860)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3861) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3862)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3863) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3864) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3865) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3866) IMS_BOOL ChatSession::StateESTABLISHING_Close(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3867) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3868)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3869) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3870)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHING_Close", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3871) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3872)     IURCSChatTerminateCmdParam *pInParam = REINTERPRET_CAST(IURCSChatTerminateCmdParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3873) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3874)     StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3875) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3876)     IMS_RESULT bResult = piChat->Close();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3877) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3878)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3879)     NotifyEstablishedInd(IMS_NULL, IURCSIMError::USERACTION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3880) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3881)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3882)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3883) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3884)     if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3885)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3886)         SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3887)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3888)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3889)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3890)         SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3891)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3892)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3893) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3894)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3895) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3896) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3897) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3898) IMS_BOOL ChatSession::StateESTABLISHING_SessionStarted(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3899) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3900)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3901) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3902)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHING_SessionStarted", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3903) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3904)     (void)objMSG;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3905) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3906)     StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3907) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3908)     //new AC : IM SESSION TIMER : after the timer expire, the session will be closed.
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3909)     objInactivityTimer.SetListener(this);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3910)     objInactivityTimer.Listen(pRCSIMConfig->GetIMSessionTimerValue()*1000);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3911) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3912)     SetState(STATE_ESTABLISHED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3913) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3914)     //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3915)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3916)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3917)         CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_CONNECTED,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3918)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3919) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3920)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3921)     NotifyEstablishedInd(piChat->GetSessionId(), IURCSIMError::NOERROR);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3922) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3923)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3924) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3925) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3926) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3927) IMS_BOOL ChatSession::StateESTABLISHING_SessionStartFailed(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3928) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3929)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3930) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3931)     IMS_SINT32 nErrorReason = LONG_TO_SINT(objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3932) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3933)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHING_SessionStartFailed : Reason = %d", GetSessionId(), nErrorReason, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3934) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3935)     StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3936) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3937)     SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3938) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3939)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3940)     NotifyEstablishedInd(IMS_NULL, nErrorReason);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3941) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3942)     DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3943) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3944)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3945) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3946) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3947) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3948) IMS_BOOL ChatSession::StateESTABLISHING_TimerExpired(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3949) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3950)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3951) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3952)     IMS_UINTP nExpiredTimerId = objMSG.nLparam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3953) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3954)     IMS_TRACE_D("Session-ID[%" PFLS_u "] : StateESTABLISHING_TimerExpired", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3955) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3956)     if (anTimerId[TIMER_LISTENER] == nExpiredTimerId)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3957)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3958)         StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3959) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3960)         IMS_RESULT bResult = piChat->Close();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3961) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3962)         // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3963)         NotifyEstablishedInd(IMS_NULL, IURCSIMError::NOANSWER);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3964) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3965)         if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3966)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3967)             SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3968)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3969)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3970)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3971)             SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3972)             DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3973)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3974)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3975) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3976)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3977) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3978) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3979) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3980) IMS_BOOL ChatSession::StateESTABLISHED_SendMessage(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3981) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3982)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3983) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3984)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHED_SendMessage", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3985) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3986)     //IURCSChatSendMessageCmdParam *pInParam = REINTERPRET_CAST(IURCSChatSendMessageCmdParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3987)     IURCSChatMessageParam *pInParam = REINTERPRET_CAST(IURCSChatMessageParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3988) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3989)     // Set the given params
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3990)     AString strMessageId = pInParam->szMessageId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3991)     AString strMessage = pInParam->pszContent;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3992)     AString strContentType_ = pInParam->szContentType;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3993) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3994)     // metric
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3995)     metricHelper->NotifyMetricReportInd(IRCSIMMETRIC::SEND_IM_START_IND, IURCSIMError::NOERROR, 0, strMessage.GetCapacity(), CHAT);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3996) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3997)     //Create CPIM message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3998)     CpimChatMessageData *piChatMessageData = new CpimChatMessageData();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 3999) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4000)     piChatMessageData->strTo = RCSIMIdentity::GetAnonymousUserId();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4001)     piChatMessageData->strFrom = RCSIMIdentity::GetAnonymousUserId();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4002) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4003)     AString strDisposition("positive-delivery");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4004) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4005)     if (pRCSIMConfig->IsDisplayNotificationRequestEnabled())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4006)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4007)         strDisposition.Append(", display");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4008)     }
28c525cb (geunchae.park 2017-09-08 13:04:39 +0900 4009)     if (piSessionCapa->IsCapable(IMSessionCapabilityInfo::NFS))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4010)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4011)         strDisposition.Append(", interworking");
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4012)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4013) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4014)     piChatMessageData->strDisposition = strDisposition;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4015)     piChatMessageData->strMessageId = strMessageId;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4016) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4017)     piChatMessageData->strContent = strMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4018)     piChatMessageData->strContentType = strContentType_;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4019) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4020)     // set PANI
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4021)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4022)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4023)         AString strPANI = pRCSIMConfig->GetPANIHeader(piIMService);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4024)         piChatMessageData->strPANI = strPANI;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4025)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4026) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4027)     IMMessage *pMessage = new IMMessage(strMessageId);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4028) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4029)     IMS_BOOL bResult = IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4030)     IMS_SINT32 nReason  = IURCSIMError::INTERNAL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4031) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4032)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHED_SendMessage Type[%d]", GetSessionId(), pInParam->nType, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4033) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4034)     if (pInParam->nType == ContentPart::MSG_CONTENT) // type content
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4035)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4036)         ByteArray objCpimContent;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4037)         bResult = piIMCpimMessage->CreateMessage(piChatMessageData, objCpimContent);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4038) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4039)         if (bResult == IMS_TRUE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4040)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4041)             pMessage->AddContentPart(new ContentPart(IMConstants::CONTENT_TYPE_CPIM, objCpimContent, strMessageId));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4042)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4043)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4044)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4045)             IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHED_SendMessage failed1", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4046)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4047)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4048)     else if (pInParam->nType == ContentPart::MSG_PATH) // content file path
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4049)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4050)         AString strContentPath;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4051)         bResult = piIMCpimMessage->CreateMessage(piChatMessageData, strContentPath);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4052) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4053)         if (bResult == IMS_TRUE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4054)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4055)             pMessage->AddContentPart(new ContentPart(IMConstants::CONTENT_TYPE_CPIM, strContentPath, strMessageId));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4056)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4057)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4058)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4059)             IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHED_SendMessage failed2", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4060)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4061)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4062)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4063)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4064)         nReason = IURCSIMError::INVALIDPARAMETER;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4065)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4066) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4067)     if (bResult == IMS_TRUE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4068)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4069)         if (piChat->SendMessage(pMessage, IMS_TRUE) == IMS_FAILURE)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4070)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4071)             NotifyMessageSentInd(strMessageId, IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4072) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4073)             if (pMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4074)             {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4075)                 pMessage->Destroy(); //delete all temp files if the content is file
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4076) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4077)                 delete pMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4078)                 pMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4079)             }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4080)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4081)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4082)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4083)             objIMMessages.Add(pMessage);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4084)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4085)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4086)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4087)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4088)         NotifyMessageSentInd(strMessageId, nReason);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4089) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4090)         if (pMessage != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4091)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4092)             pMessage->Destroy(); //delete all temp files if the content is file
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4093) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4094)             delete pMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4095)             pMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4096)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4097)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4098) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4099)     delete piChatMessageData;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4100)     piChatMessageData = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4101) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4102)     objInactivityTimer.Update();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4103) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4104)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4105)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4106) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4107)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4108) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4109) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4110) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4111) IMS_BOOL ChatSession::StateESTABLISHED_SendComposingStatus(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4112) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4113)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4114) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4115)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHED_SendComposingStatus", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4116) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4117)     //IURCSChatSendIsComposingCmdParam *pInParam = REINTERPRET_CAST(IURCSChatSendIsComposingCmdParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4118)     IURCSChatIsComposingParam* pInParam = reinterpret_cast<IURCSChatIsComposingParam*>(objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4119) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4120)     if (pInParam->nTimeout >= 0)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4121)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4122) #if 0
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4123)         piChat->SendComposingIndicator(pInParam->nTimeout);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4124) #endif
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4125)         ComposingState objComposingState;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4126)         if (!objComposingState.Encode(pInParam->nTimeout))
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4127)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4128)             return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4129)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4130) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4131)         ByteArray objContent;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4132)         objContent.Append(objComposingState.GetContent());
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4133) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4134)         if (piChat != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4135)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4136)             IMMessage *pMessage = new IMMessage();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4137) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4138)             pMessage->AddContentPart(new ContentPart(IMConstants::CONTENT_TYPE_ISCOMPOSING, objContent));
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4139) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4140)             // set failure report value
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4141)             IMS_BOOL bDeliveryReport = IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4142) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4143)             piChat->SendMessage(pMessage, bDeliveryReport);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4144) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4145)             delete pMessage;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4146)             pMessage = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4147)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4148) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4149)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4150) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4151)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4152)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4153) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4154)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4155) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4156) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4157) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4158) IMS_BOOL ChatSession::StateESTABLISHED_SendIMDN(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4159) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4160)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4161) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4162)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHED_SendIMDN", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4163) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4164)     IURCSIMDNParam* pInParam = REINTERPRET_CAST(IURCSIMDNParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4165) 
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 4166)     if (1 > pInParam->objImdnMessageInfos.GetSize())
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4167)     {
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 4168)         return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4169)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4170) 
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 4171)     // sending aggregated IMDN not supported.
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 4172)     IURCSIMDNMessageInfoParam *infoParam = pInParam->objImdnMessageInfos.GetAt(0);
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 4173)     if (IMS_NULL == infoParam)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4174)     {
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 4175)         return IMS_FALSE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4176)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4177) 
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 4178)     SendIMDN(RCSIMIdentity::GetAnonymousUserId(), RCSIMIdentity::GetAnonymousUserId(),
4ae455cf (kyujong.lee   2017-09-07 09:15:49 +0900 4179)             infoParam->nType, infoParam->strMessageId, infoParam->strDateTime, pInParam->objImdnRoutes);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4180) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4181)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4182)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4183) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4184)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4185) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4186) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4187) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4188) IMS_BOOL ChatSession::StateESTABLISHED_Close(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4189) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4190)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4191) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4192)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHED_Close", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4193) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4194)     IURCSChatTerminateCmdParam *pInParam = REINTERPRET_CAST(IURCSChatTerminateCmdParam*, objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4195) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4196)     anTimerId[TIMER_LISTENER] = StartTimer(IMConstants::MAX_WAIT_TIME);//(15*1000);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4197) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4198)     //TMUS_add Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4199)     if (pRCSIMConfig->GetCountry() == RCSIMConfig::COUNTRY_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4200)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4201)         SetTerminateReasonHeader(IURCSIMTerminateReason::USER_ACTION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4202)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4203)     //TMUS_add Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4204) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4205)     IMS_RESULT bResult = piChat->Close();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4206) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4207)     //notify message sending status
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4208)     ClearIMMessageRepository();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4209) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4210)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4211)     NotifyTerminatedInd(IURCSIMError::USERACTION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4212) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4213)     delete pInParam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4214)     pInParam = IMS_NULL;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4215) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4216)     if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4217)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4218)         SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4219) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4220)         //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4221)         if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4222)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4223)             CIQSIPEnd(0, 0, strCallId, strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4224)             CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_DISCONNECTING,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4225)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4226)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4227)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4228)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4229)         SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4230)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4231)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4232) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4233)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4234) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4235) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4236) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4237) IMS_BOOL ChatSession::StateESTABLISHED_SessionClosed(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4238) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4239)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4240) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4241)     IMS_SINT32 nErrorReason = LONG_TO_SINT(objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4242) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4243)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHED_SessionClosed", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4244) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4245)     (void)objMSG;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4246) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4247)     SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4248) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4249)     //notify message sending status
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4250)     ClearIMMessageRepository();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4251) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4252)     // Do not inform if this session is deferred message
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4253)     NotifyTerminatedInd(nErrorReason);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4254) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4255)     //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4256)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4257)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4258)         CIQSIPEnd(1, 0, strCallId, strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4259)         CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_DISCONNECTING,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4260)         CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_IDLE,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4261)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4262) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4263)     DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4264) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4265)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4266) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4267) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4268) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4269) IMS_BOOL ChatSession::StateESTABLISHED_TimerExpired(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4270) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4271)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4272) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4273)     IMS_UINTP nExpiredTimerId = objMSG.nLparam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4274) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4275)     IMS_TRACE_D("Session-ID[%" PFLS_u "] : StateESTABLISHED_TimerExpired : TID[%" PFLS_u "]", GetSessionId(), nExpiredTimerId, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4276) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4277)     if (anTimerId[TIMER_LISTENER] == nExpiredTimerId)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4278)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4279)         StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4280) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4281)         //TMUS_add Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4282)         if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_TMO_US || pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_BELL_CA)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4283)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4284)             SetTerminateReasonHeader(IURCSIMTerminateReason::UNGRACEFUL_TERMINATION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4285)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4286)         //TMUS_add Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4287) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4288)         IMS_RESULT bResult = piChat->Close();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4289) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4290)         //notify message sending status
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4291)         ClearIMMessageRepository();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4292) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4293)         // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4294)         NotifyTerminatedInd(IURCSIMError::INTERNAL);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4295) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4296)         if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4297)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4298)             SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4299)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4300)         else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4301)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4302)             SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4303)             DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4304)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4305)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4306) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4307)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4308) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4309) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4310) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4311) IMS_BOOL ChatSession::StateESTABLISHED_InactivityNotified(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4312) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4313)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4314) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4315)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHED_InactivityNotified", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4316) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4317)     (void)objMSG;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4318) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4319)     //notify message sending status
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4320)     ClearIMMessageRepository();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4321) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4322)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4323)     NotifyTerminatedInd(IURCSIMError::CLOSEDBYREMOTE);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4324) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4325)     //TMUS_add Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4326)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_TMO_US || pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_BELL_CA)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4327)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4328)         SetTerminateReasonHeader(IURCSIMTerminateReason::UNGRACEFUL_TERMINATION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4329)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4330)     //TMUS_add Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4331) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4332)     IMS_RESULT bResult = piChat->Close();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4333) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4334)     if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4335)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4336)         SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4337) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4338)         //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4339)         if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4340)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4341)             CIQSIPEnd(0, 0, strCallId, strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4342)             CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_DISCONNECTING,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4343)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4344)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4345)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4346)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4347)         SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4348)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4349)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4350) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4351)     //notify message sending status
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4352)     ClearIMMessageRepository();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4353) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4354)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4355) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4356) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4357) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4358) IMS_BOOL ChatSession::StateESTABLISHED_SessionAborted(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4359) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4360)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4361) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4362)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateESTABLISHED_SessionAborted", GetSessionId(), 0, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4363) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4364)     (void)objMSG;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4365) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4366)     //notify message sending status
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4367)     ClearIMMessageRepository();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4368) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4369)     // Notify listener
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4370)     NotifyTerminatedInd(IURCSIMError::MEDIADISCONNECTED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4371) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4372)     IMS_RESULT bResult = IMS_FAILURE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4373) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4374)     //TMUS_add Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4375)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_TMO_US || pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_BELL_CA)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4376)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4377)         SetTerminateReasonHeader(IURCSIMTerminateReason::UNGRACEFUL_TERMINATION);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4378)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4379)     //TMUS_add Reason header in BYE request
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4380) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4381)     if (piChat != IMS_NULL)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4382)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4383)        bResult = piChat->Close();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4384)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4385) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4386)     if (bResult == IMS_SUCCESS)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4387)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4388)         SetState(STATE_TERMINATING);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4389) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4390)         //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4391)         if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4392)         {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4393)             CIQSIPEnd(0, 0, strCallId, strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4394)             CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_DISCONNECTING,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4395)         }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4396)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4397)     else
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4398)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4399)         SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4400)         DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4401)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4402) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4403)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4404) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4405) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4406) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4407) IMS_BOOL ChatSession::StateTERMINATING_SessionClosed(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4408) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4409)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4410) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4411)     IMS_SINT32 nErrorReason = LONG_TO_SINT(objMSG.nLparam);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4412) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4413)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateTERMINATING_SessionClosed : ErrorReason = %d", GetSessionId(), nErrorReason, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4414) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4415)     //CIQ
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4416)     if (pRCSIMConfig->GetOperator() == RCSIMConfig::OPERATOR_ATT_US)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4417)     {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4418)         CIQSIPState(BaseSession::CIQ_SIP_CALL_STATE_IDLE,strCallId,strRemoteUser);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4419)     }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4420) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4421)     StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4422) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4423)     SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4424)     DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4425) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4426)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4427) }
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4428) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4429) PRIVATE
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4430) IMS_BOOL ChatSession::StateTERMINATING_TimerExpired(IN IMSMSG &objMSG)
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4431) {
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4432)     //---------------------------------------------------------------------------------------------
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4433) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4434)     IMS_UINTP nExpiredTimerId = objMSG.nLparam;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4435) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4436)     IMS_TRACE_I("Session-ID[%" PFLS_u "] : StateTERMINATING_TimerExpired : TID[%" PFLS_u "]", GetSessionId(), nExpiredTimerId, 0);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4437) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4438)     StopTimer(&anTimerId[TIMER_LISTENER]);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4439) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4440)     SetState(STATE_TERMINATED);
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4441)     DestroyAsync();
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4442) 
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4443)     return IMS_TRUE;
f4146f7a (hyunbin.shin  2017-08-16 07:44:12 +0900 4444) }
