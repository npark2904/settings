#!/bin/sh
## version: v3.3 (190305)
## owner : geunchae.park

################################################################################################
######################################### default value ########################################
################################################################################################
target_ims_ver=6
target_architecture="64" # empty=32bit, 64=64bit
target_os="pos" #default P-OS
localReleasePath="$HOME/outfiles"

isFTPRelease=false
isFTPforSelectedFile=false;
MYFTP_URL=10.157.17.54 # shoud use linux server Server
MYFTP_PATH="/volume1/Share/RCS_SSH_RELEASE"  # Must create manually
MYFTP_ID=rcs-share
MYFTP_PW=lge123
################################################################################################
################################################################################################

declare -a FTPTargetFiles
declare -a filepathArgs
imsBuildOutputPath=
fileNamePostfix=

#check args
for idx in "$@"
do
    if [[ "$idx" == "ims6" ]]; then
        target_ims_ver=6
    elif [[ "$idx" == "ims4" ]]; then
        target_ims_ver=4
    elif [[ "$idx" == "32" ]]; then
        target_architecture=""
    elif [[ "$idx" == "64" ]]; then
        target_architecture="64"
    elif [ "$idx" == "pos" -o "$idx" == "nos" -o "$idx" == "oos" ]; then
        target_os=$idx
    elif [[ "$idx" == "-f" ]]; then
        isFTPRelease=true
    elif [[ "$idx" == "-fp" ]]; then
        isFTPRelease=true
        isFTPforSelectedFile=true
    elif [[ "$idx" == "-p" ]]; then
        isFTPforSelectedFile=true
    elif [ "$idx" == "-h" -o "$idx" == "-help" -o "$idx" == "--h" -o "$idx" == "--help" ]; then
        echo "Please check outfile_release default values."
        echo "Local release      : outfile_release [ims6|ims4] [64|32] [pos|oos|nos]"
        echo "FTP auto release   : outfile_release [-f] [ims6|ims4] [64|32]"
        echo "FTP manual release : outfile_release [-fp] [filename|filepath]"
        exit 0
    else
    filepathArgs+=("$idx")
    fi
done

if [[ "$target_os" == "pos" ]]; then
    imsBuildOutputPath="system/product"
    fileNamePostfix=".lge"
else
    imsBuildOutputPath="system"
    fileNamePostfix=""
fi

#set release folder path
localReleasePath+="/ims$target_ims_ver"
if [[ "$target_architecture" == "" ]]; then
    localReleasePath+="/32"
fi

############################################################################################################
######################################## define auto FTP copy files ########################################
############################################################################################################
if [[ $isFTPforSelectedFile == false ]]; then
    FTPTargetFiles+=("libims${fileNamePostfix}.so")
    FTPTargetFiles+=("Ims${target_ims_ver}.apk")
    FTPTargetFiles+=("ims_info.log")
fi
############################################################################################################
############################################################################################################


############################################################################################################
###################################### define build output files path ######################################
############################################################################################################
declare -a buildOutputFiles
buildOutputFiles+=("$ANDROID_PRODUCT_OUT/$imsBuildOutputPath/lib$target_architecture/libims${fileNamePostfix}.so")
buildOutputFiles+=("$ANDROID_PRODUCT_OUT/$imsBuildOutputPath/lib$target_architecture/libimsmmpf${fileNamePostfix}.so")
buildOutputFiles+=("$ANDROID_PRODUCT_OUT/$imsBuildOutputPath/lib$target_architecture/libimsrcsmedia${fileNamePostfix}.so")
buildOutputFiles+=("$ANDROID_PRODUCT_OUT/$imsBuildOutputPath/lib$target_architecture/libimsvtjni${fileNamePostfix}.so")
buildOutputFiles+=("$ANDROID_PRODUCT_OUT/$imsBuildOutputPath/lib$target_architecture/libimswms${fileNamePostfix}.so")
buildOutputFiles+=("$ANDROID_PRODUCT_OUT/$imsBuildOutputPath/priv-app/Ims$target_ims_ver/Ims$target_ims_ver.apk")
buildOutputFiles+=("$ANDROID_PRODUCT_OUT/$imsBuildOutputPath/priv-app/RCSProvider/RCSProvider.apk")
#############################################################################################################
#############################################################################################################

#functions
copyToOutfolder() { # arg1=output file path
    if [[ ! -e "$1" ]];then
        errorLog+="\n[Error] $1 does not exist"
    else
        cp -r $1 $localReleasePath/
        resultLog+="\n> $1 =====(copy)====> $localReleasePath/"
    fi
}

StartLocalRelease() {
    resultLog=""
    errorLog=""

    if [ -z $ANDROID_PRODUCT_OUT ];then
        echo "ANDROID_PRODUCT_OUT is null"
        exit 1;
    else
        echo -e "\n---- Result : Copy files ----"
        echo -e "\$ANDROID_PRODUCT_OUT = $ANDROID_PRODUCT_OUT"
        echo -e "Ims git = Ims$target_ims_ver"
        if [[ $target_architecture == "64" ]]; then
            strBit="64bit"
        else
            strBit="32bit"
        fi
        echo -e "Architecture = $strBit"
    fi

    # backup previous files
    rm -rf $localReleasePath/backup/
    mkdir -p $localReleasePath/backup/
    mv $localReleasePath/symbol/ $localReleasePath/backup/
    mv $localReleasePath/*.log $localReleasePath/backup/
    mv $localReleasePath/*.so $localReleasePath/backup/
    mv $localReleasePath/*.apk $localReleasePath/backup/

    #copy symbol
    if [[ ! -e "$ANDROID_PRODUCT_OUT/symbols/$imsBuildOutputPath/lib$target_architecture/libims${fileNamePostfix}.so" ]];then
        errorLog+="\n[Error] (Symbol) symbols/$imsBuildOutputPath/lib$target_architecture/libims${fileNamePostfix}.so does not exist"
    else
        mkdir -p $localReleasePath/symbol
        cp -r $ANDROID_PRODUCT_OUT/symbols/$imsBuildOutputPath/lib$target_architecture/libims${fileNamePostfix}.so $localReleasePath/symbol/
        resultLog+="\n> (Symbol) \"symbols/$imsBuildOutputPath/lib$target_architecture/libims${fileNamePostfix}.so\" =====(copy)====> $localReleasePath/symbol/"
    fi

    #copy so, apk
    for ((i=0;i<${#buildOutputFiles[@]};i++)) do
        copyToOutfolder ${buildOutputFiles[i]}
    done

    #save IMS git info
    imsGitPath="$ANDROID_BUILD_TOP/vendor/lge/apps/Ims"
    if [[ $target_ims_ver == 4 ]]; then
        $imsGitPath+=$target_ims_ver
    fi
    cd $imsGitPath
    echo -e "\n##### Target Product #####\n$TARGET_PRODUCT" >> $localReleasePath/ims_info.log
    echo -e "\n##### Ims path #####\n`pwd`" >> $localReleasePath/ims_info.log
    echo -e "\n##### Ims git status #####" >> $localReleasePath/ims_info.log
    git status >> $localReleasePath/ims_info.log
    echo -e "\n##### Ims git log #####" >> $localReleasePath/ims_info.log
    git log --oneline -50 >> $localReleasePath/ims_info.log

    echo -e "$errorLog"
    echo -e "$resultLog\n"
}

upload() { # arg1=path arg=local file path
    if [[ ! -e $2 ]];then
        echo "$2 does not exist"
        exit -1
    fi

    echo -e "\nStart uploading [ $2 ] to [ $1 ] ..."

cd `dirname $2`
ftp -n $MYFTP_URL <<EOF
user $MYFTP_ID $MYFTP_PW
cd $1
verbose
put `basename $2`
bye
EOF
}

StartFTPRelease() {

    newFolder=`date '+%Y%m%d_%H%M%S'`
    if [[ $isFTPforSelectedFile == true ]]; then
        #check ftp for selected file
        for ((i=0;i<${#filepathArgs[@]};i++)) do
            if [[ -f ${filepathArgs[i]} ]];then
                FTPTargetFiles+=("`readlink -e -n ${filepathArgs[i]}`")
            else
                echo "[ ${filepathArgs[i]} ] file does not exist"
                exit -1
            fi
        done

        if [[ ${#FTPTargetFiles[@]} == "0"  ]];then
            echo "input one or more files"
            exit -1
        fi

        echo
        echo "[ ${#FTPTargetFiles[@]} file release via FTP ]"
        newFolder+="_${#FTPTargetFiles[@]}_file_$USER"
    else
        if [[ $target_architecture == "64" ]]; then
            strBit="64bit"
        else
            strBit="32bit"
        fi
        echo
        echo "[ Ims$target_ims_ver $strBit release via FTP ]"
        newFolder+="_ims${target_ims_ver}_${strBit}_$USER"


        for ((i=0;i<${#FTPTargetFiles[@]};i++)) do
            if [[ ! -f $localReleasePath/${FTPTargetFiles[i]} ]];then
                echo "[ $localReleasePath/${FTPTargetFiles[i]} ] file does not exist"
                exit -1
            fi
        done
    fi

    for ((i=0;i<${#FTPTargetFiles[@]};i++)) do
        echo " ${FTPTargetFiles[i]}"
    done

    echo
    echo "FTP : $MYFTP_URL"
    echo "ID : $MYFTP_ID"
    echo "Create new folder [ $newFolder ] ..."
ftp -n $MYFTP_URL  <<EOF
user $MYFTP_ID $MYFTP_PW
cd $MYFTP_PATH
mkdir $newFolder
bye
EOF

    uploadPath=$MYFTP_PATH"/"$newFolder

    # upload start
    for ((i=0;i<${#FTPTargetFiles[@]};i++)) do
        if [[ $isFTPforSelectedFile == true ]]; then
            upload $uploadPath ${FTPTargetFiles[i]}
        else
            upload $uploadPath "$localReleasePath/${FTPTargetFiles[i]}"
        fi
    done
}

################
## main start ##
################

if [[ $isFTPRelease == false ]]; then
    StartLocalRelease
else
    StartFTPRelease

    echo
    echo "-- Finish FTP Release --"
    echo
fi
